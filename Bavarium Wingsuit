--@name Bavarium Wingsuit
--@author Nakkitsunami
--@include nakilibs/pac_to_holo_loader.txt
--@include nakilibs/bone_manipulate_lib.txt
--@shared
--@model models/hunter/misc/sphere075x075.mdl

--[[

save these to gmod/gmod/data/starfall/nakilibs/
you can also save them in starfall editor, just don't change the name, it should write them to the same location

https://github.com/dstmnaki/starfall-projects/blob/main/Nakilibs/bone_manipulate_lib.txt
https://github.com/dstmnaki/yamato-starfall/blob/main/nakilibs/pac_to_holo_loader.txt

--]]

if SERVER then
    chip():setColor(Color(255,255,255,0))
    chip():setAngles(Angle())
    chip():setNocollideAll(true)
    local ang_in = chip():getAngles()
    local phys_obj = chip():getPhysicsObject()
    phys_obj:enableGravity(false)
    phys_obj:setDragCoefficient(0)
    local seat = prop.createSeat(chip():getPos(), Angle(0,0,0), "models/nova/airboat_seat.mdl", true)
    seat:setNocollideAll(true)
    seat:setColor(Color(255,255,255,0))
    owner():setMaterial("")
    
    snd = sound.create(chip(), "^thrusters/Rocket04.wav", false)
    printConsole(snd and "Boost sound created successfully" or "Failed to create boost sound")
    wind = sound.create(chip(), "ambient/levels/canals/windmill_wind_loop1.wav", false)
    printConsole(wind and "Wind sound created successfully" or "Failed to create wind sound")
    
    local ragdoll_ent = nil
    local ragdoll_view = false
    --[[
    hook.add("Net","",function(name,len,ply)
        if name == "send_model" then
            if not ragdoll_ent or ragdoll_ent == nil then
                local model = net.readString()
                ragdoll_ent = prop.createRagdoll(model, false)
                
                ragdoll_ent:setNoDraw(true)
                local player_color_get = owner():getPlayerColor()
                
                player_color = Color(math.round(player_color_get[1]*255),math.round(player_color_get[2]*255),math.round(player_color_get[3]*255),255)
                
                ragdoll_ent:getPhysicsObject():setPos(chip():getPos())
                for i = 1, ragdoll_ent:getPhysicsObjectCount() do
                    local bone = ragdoll_ent:getPhysicsObjectNum(i)
                    if bone then
                        bone:setPos(chip():getPos())
                        bone:enableMotion(true)
                    end
                end
                net.start("send_ragdoll")
                net.writeEntity(ragdoll_ent)
                net.send(owner(),false)
            end
        end
    end)]]
    hook.add("Removed","",function()
        owner():setMaterial("")
    end)
    timer.simple(1,function()
        net.start("send_seat")
        net.writeEntity(seat)
        net.send(owner(),false)
    end)
    local force = 2
    local mass = chip():getMass()
    local boost_button_toggle = false
    local first_time_used = false
    local last_speed_x = 0
    local last_speed_y = 0
    local last_speed_z = 0
    
    function kill_ply(stored_velocity)
        --[[
        net.start("send_ragdoll")
        net.writeEntity(ragdoll_ent)
        net.send(owner(),false)
        ragdoll_ent:setPos(chip():getPos())
        ragdoll_ent:enableMotion(true)
        ragdoll_ent:getPhysicsObject():setPos(chip():getPos())
        ragdoll_ent:getPhysicsObject():enableMotion(true)
        ragdoll_ent:getPhysicsObject():setVelocity(stored_velocity)
        ragdoll_ent:setNocollideAll(true)
        ragdoll_ent:setNoDraw(false)
        ragdoll_view = true
        for i = 1, ragdoll_ent:getPhysicsObjectCount() do
            local bone = ragdoll_ent:getPhysicsObjectNum(i)
            if bone then
                bone:setPos(chip():getPos())
                bone:setVelocity(stored_velocity)
            end
        end
        net.start("activate_ragdoll")
        net.writeBool(true)
        net.send(find.allPlayers(),false)
        timer.simple(5,function()
            chip():setPos(ragdoll_ent:getPos())
            timer.simple(0.5,function()
                ragdoll_ent:setNoDraw(true)
                ragdoll_ent:getPhysicsObject():enableMotion(false)
                seat:ejectDriver()
                net.start("activate_ragdoll")
                net.writeBool(false)
                net.send(find.allPlayers(),false)
                ragdoll_view = false
                owner():setMaterial("")
            end)
        end)
        chip():enableMotion(false)]]
    end
    local store_vel = Vector()
    timer.create("int",1/25,0,function()
        local W = (owner():keyDown(IN_KEY.FORWARD) and not ragdoll_view) and 1 or 0
        local S = (owner():keyDown(IN_KEY.BACK) and not ragdoll_view) and 1 or 0
        local A = (owner():keyDown(IN_KEY.MOVELEFT) and not ragdoll_view) and 1 or 0
        local D = (owner():keyDown(IN_KEY.MOVERIGHT) and not ragdoll_view) and 1 or 0
        
        local R = owner():keyDown(IN_KEY.RELOAD) and not ragdoll_view
        
        local boost_button = owner():keyDown(IN_KEY.SPEED) and not ragdoll_view
        
        if R then
            if R_Toggle != true then
                R_Toggle = true
                if owner():inVehicle() == false and owner():getVehicle() != seat then
                    timer.create("activate",owner():isOnGround() and 1 or 0,1,function()
                        phys_obj:enableMotion(true)
                        if owner():isOnGround() then
                            local yaw = owner():getEyeAngles().y
                            chip():setPos(owner():getPos()+Vector(0,0,45))
                            chip():setAngles(Angle(-45,yaw,0))
                            phys_obj:applyForceCenter(chip():getForward() * 2000 * mass)
                            
                            if snd and snd != nil then
                                snd:play()
                                timer.simple(0.75,function()
                                    snd:stop(0.25)
                                end)
                            end
                        else
                            chip():setPos(owner():getPos())
                            chip():setAngles(owner():getVelocity():getAngle())
                            phys_obj:applyForceCenter(chip():getForward() * owner():getVelocity():getLength() * mass)
                        end
                        
                        
                        if wind and wind != nil then
                            wind:play()
                        end
                        seat:use(USE_ON, 0)
                        owner():setMaterial("null")
                        first_time_used = true
                    end)
                end
            end
        else
            if R_Toggle != false then
                R_Toggle = false
                timer.stop("activate")
            end
        end
        if owner():inVehicle() != true and chip():isFrozen() != true then
            owner():setMaterial("")
            phys_obj:enableMotion(false)
            if snd and snd != nil then
                snd:stop(0.25)
            end
            if wind and wind != nil then
                wind:stop(0.5)
            end
        end
        if owner():inVehicle() and owner():getVehicle() == seat then
            
            local cur_speed = chip():getLocalVelocity().x
            
            if (cur_speed - last_speed_x)/53 < -50 then
                kill_ply(store_vel)
            end
            last_speed_x = cur_speed
            
            
            local cur_speed = chip():getLocalVelocity().y
            
            if math.abs(cur_speed - last_speed_y)/53 > 50 then
                kill_ply(store_vel)
            end
            last_speed_y = cur_speed
            
            
            local cur_speed = chip():getLocalVelocity().z
            
            if math.abs(cur_speed - last_speed_y)/53 > 50 then
                kill_ply(store_vel)
            end
            last_speed_z = cur_speed
            
            store_vel = chip():getVelocity()
            
            if snd and snd != nil and wind and wind != nil then
                if boost_button then
                    if boost_button_toggle != true then
                        boost_button_toggle = true
                        snd:play()
                    end
                else
                    if boost_button_toggle != false then
                        boost_button_toggle = false
                        snd:stop(0.25)
                    end
                end
                local vel = math.clamp(-0.1+chip():getVelocity():getLength()/3000,0,1)
                wind:setPitch(60+140*vel)
                wind:setVolume(vel)
            end
            
            local aim_ang = owner():getEyeAngles()+Angle((W-S) * 45, 0, 0):rotateAroundAxis(Vector(1,0,0),chip():getAngles().r) + Angle(0,(A-D) * 45,0)
            aim_ang.r = math.clamp((ang_in.y-aim_ang.y)*10 + 90*(D-A),-45,45)
            ang_in = math.slerpQuaternion(ang_in:getQuaternion(),aim_ang:getQuaternion(),0.2):getEulerAngle()
            
            local vel  = phys_obj:getVelocity()
            local speed = vel:getLength()
            
            local local_vel_get = chip():getLocalVelocity()
            local x_mult = math.clamp(local_vel_get.x/10000,boost_button and 1 or 0,1)
            local local_vel = local_vel_get * x_mult
            
            local pitch_mult = boost_button and 0 or (1-math.easeOutSine(math.clamp(1+ang_in.p/90,0,1)))+math.easeOutSine(math.abs(chip():getAngleVelocityAngle().pitch/90))
            
            local forward = chip():getForward()
            local right   = chip():getRight()
            local up      = chip():getUp()
            
            local _boost = boost_button and (6000-speed/53)*1.5 or 0
            
            local forward_force = forward * _boost
            
            local desired_vel = forward * speed
            
            local redir_strength = 50
            local redir_force = (desired_vel - vel) * redir_strength * x_mult * (1 - pitch_mult*0.25)
            
            local damping = Vector(
                -local_vel.x * (pitch_mult+0.1)*(1+pitch_mult*0.5),
                -local_vel.y * (1 - pitch_mult)*(1-pitch_mult*0.5),
                -local_vel.z * (1 - pitch_mult)*(1-pitch_mult*0.5)
            )
            
            local world_damping = chip():localToWorld((damping*(1 + _boost/6000*0.5) / (1 + x_mult * (1 - pitch_mult)))) - chip():getPos()
            
            local gravity = Vector(0,0,-1200 * math.clamp((1 - 1.5*(1 - pitch_mult)*x_mult),0,1))
            
            local total_force = forward_force + gravity + world_damping + redir_force
            
            phys_obj:applyForceCenter(total_force * mass / 35)
    
    
            local ang_local = chip():worldToLocalAngles(ang_in)
            local ang_to_vector = ang_local-chip():getAngleVelocityAngle()
            chip():applyAngForce(ang_to_vector*force*mass)
            
            
        elseif first_time_used == true then
            --chip():setPos(Vector())
        end
        seat:setPos(chip():getPos())
    end)
else
    require("nakilibs/pac_to_holo_loader.txt")
    require("nakilibs/bone_manipulate_lib.txt")
    
    local ht, hc = {}, 0

    -- \/ \/ \/ INSERT CODE INSIDE HERE \/ \/ \/
    
    local size = 1
    
    local parent = chip()
    local real_parent = chip()
    
    local player_color_get = owner():getPlayerColor()
    
    player_color = Color(math.round(player_color_get[1]*255),math.round(player_color_get[2]*255),math.round(player_color_get[3]*255),255)
    
    local lookup_bones = {
        "ValveBiped.Bip01_Pelvis",
        "ValveBiped.Bip01_Spine",
        "ValveBiped.Bip01_Spine1",
        "ValveBiped.Bip01_Spine2",
        "ValveBiped.Bip01_Spine4",
        "ValveBiped.Bip01_Neck1",
        "ValveBiped.Bip01_Head1",
        
        "ValveBiped.Bip01_R_Clavicle",
        "ValveBiped.Bip01_R_UpperArm",
        "ValveBiped.Bip01_R_Forearm",
        "ValveBiped.Bip01_R_Hand",
        
        "ValveBiped.Bip01_L_Clavicle",
        "ValveBiped.Bip01_L_UpperArm",
        "ValveBiped.Bip01_L_Forearm",
        "ValveBiped.Bip01_L_Hand",
        
        "ValveBiped.Bip01_R_Thigh",
        "ValveBiped.Bip01_R_Calf",
        "ValveBiped.Bip01_R_Foot",
        
        "ValveBiped.Bip01_L_Thigh",
        "ValveBiped.Bip01_L_Calf",
        "ValveBiped.Bip01_L_Foot",
    }
    
    local bone_ids, bone_ids_parent = {}, {}
    local player_model_is_valid = false
    local HAS_BONES = false
    
    function setup_player_model(ent_to_check)
        player_model_is_valid, bone_ids, bone_ids_parent = bone_manipulate_lib.validateBones(ent_to_check,lookup_bones,bone_ids,bone_ids_parent)
        HAS_BONES = player_model_is_valid
        if not player_model_is_valid then
            if player() == owner() then
                if ent_to_check:getModel() == "models/player/breen.mdl" then
                    print("Still Invalid Playermodel! Check bone lookup table!!!")
                else
                    print("Invalid Playermodel! Defaulting to breen...")
                end
            end
        else
            local temp = {}
            for key, value in pairs(bone_ids) do
                temp[string.sub(key,18,-1)] = value
            end
            bone_ids = table.copy(temp)
            temp = {}
            for key, value in pairs(bone_ids_parent) do
                temp[string.sub(key,18,-1)] = value
            end
            bone_ids_parent = table.copy(temp)
            temp = {}
            
            print("Bavarium Wingsuit by Nakkitsunami")
            print("Hold R to deploy wingsuit from ground")
            print("Press R to deploy wingsuit when in air")
            print("Mouse aiming")
            print("WASD to offset angle")
            print("Shift to boost")
            print("E to exit")
        end
    end
    
    hc=hc+1 ht[hc]={"player_ent",parent,real_parent,Vector(0,0,0),Angle(0,0,0),owner():getModel(),"",Color(255,255,255,255),Vector(1),{}}
    
    hc=hc+1 ht[hc]={"wing_attach_bottom",parent,real_parent,Vector(0,0,0),Angle(0,0,0),"models/hunter/blocks/cube025x025x025.mdl","",Color(255,255,255,0),Vector(0.1),{}}
    hc=hc+1 ht[hc]={"left_hand",parent,real_parent,Vector(0,0,0),Angle(0,0,0),"models/sprops/misc/axis_plane.mdl","",Color(255,255,255,0),Vector(0.1),{}}
    hc=hc+1 ht[hc]={"right_hand",parent,real_parent,Vector(0,0,0),Angle(0,0,0),"models/sprops/misc/axis_plane.mdl","",Color(255,255,255,0),Vector(0.1),{}}
    
    
    hc=hc+1 ht[hc]={"backpack",parent,real_parent,Vector(0,0,0),Angle(0,0,0),"models/hunter/blocks/cube025x025x025.mdl","",Color(255,255,255,0),Vector(0.1),{}}
    local parent = "backpack"
    local real_parent = "backpack"
    
    hc=hc+1 ht[hc]={hc,parent,real_parent,Vector(4.404,-2.552,0),Angle(-90,-180,0),"models/hunter/tubes/tubebend1x1x90.mdl","models/props_debris/building_template010a",Color(75,75,75,255),Vector(0.075,0.01,0.3),{}}
    
    hc=hc+1 ht[hc]={hc,parent,real_parent,Vector(4.33,-3.972,0),Angle(90,0,0),"models/hunter/tubes/tubebend1x1x90.mdl","models/props_debris/building_template010a",player_color,Vector(0.0765,0.051,0.306),{{1,Vector(0,0,5.6),Vector(0,-0.966,-0.259)},{2,Vector(0,0,3.06),Vector(0,0.871,0.491)}}}
    hc=hc+1 ht[hc]={hc,parent,real_parent,Vector(3.784,-3.772,0),Angle(-90,0,0),"models/hunter/misc/cone1x05.mdl","models/props_debris/building_template010a",player_color,Vector(0.054,-0.036,0.162),{{1,Vector(0,0,0.7),Vector(0,-0.296,-0.955)}}}
    hc=hc+1 ht[hc]={hc,parent,real_parent,Vector(4.774,-4.022,0),Angle(-90,-17.2,0),"models/hunter/misc/cone1x05.mdl","models/props_debris/building_template010a",Color(75,75,75,255),Vector(0.075,0.05,0.25),{{1,Vector(0,0,1.1),Vector(0,0.955,0.296)}}}
    hc=hc+1 ht[hc]={hc,parent,real_parent,Vector(3.774,-3.672,0),Angle(-90,0,0),"models/hunter/misc/cone1x05.mdl","models/props_debris/building_template010a",Color(75,75,75,255),Vector(0.0615,0,0.1845),{{1,Vector(0,0,0.8),Vector(0,0,-1)}}}
    hc=hc+1 ht[hc]={hc,parent,real_parent,Vector(4.764,-4.022,0),Angle(-90,-17.2,0),"models/hunter/misc/cone1x05.mdl","models/props_debris/building_template010a",Color(75,75,75,255),Vector(0.075,0.05,0.25),{{1,Vector(0,0,1.1),Vector(0,0.296,-0.955)}}}
    hc=hc+1 ht[hc]={hc,parent,real_parent,Vector(4.064,-3.692,0),Angle(0,90,90),"models/hunter/tubes/circle4x4c.mdl","models/props_debris/building_template010a",Color(75,75,75,255),Vector(0.0114,0.0151,0.2525),{}}
    hc=hc+1 ht[hc]={hc,parent,real_parent,Vector(3.774,-3.772,0),Angle(-90,0,0),"models/hunter/misc/cone1x05.mdl","models/props_debris/building_template010a",player_color,Vector(0.054,0.036,0.162),{{1,Vector(0,0,0.7),Vector(0,-0.296,-0.955)}}}
    hc=hc+1 ht[hc]={hc,parent,real_parent,Vector(4.464,-3.332,0),Angle(0,0,90),"models/hunter/tubes/circle4x4c.mdl","models/props_debris/building_template010a",Color(75,75,75,255),Vector(0.0294,0.0147,0.245),{}}
    hc=hc+1 ht[hc]={hc,parent,real_parent,Vector(3.774,-3.772,0),Angle(-90,0,0),"models/hunter/misc/cone1x05.mdl","models/props_debris/building_template010a",Color(75,75,75,255),Vector(0.039,0.026,0.117),{}}
    hc=hc+1 ht[hc]={hc,parent,real_parent,Vector(4.404,-3.972,0),Angle(90,0,0),"models/hunter/tubes/tubebend1x1x90.mdl","models/props_debris/building_template010a",Color(75,75,75,255),Vector(0.075,0.05,0.3),{{1,Vector(0,0,0.36),Vector(0,-0.296,0.955)}}}
    
    hc=hc+1 ht[hc]={"afterburner",parent,real_parent,Vector(3.774,-3.772,0),Angle(-90,0,0),"models/hunter/misc/cone1x05.mdl","models/debug/debugwhite",Color(0,255,255,125),Vector(0.039,0.026,0.3)*1.1,{}}
    
    hc=hc+1 ht[hc]={"streak_left","left_hand","left_hand",Vector(5,-2,0),Angle(0,0,0),"models/hunter/misc/cone1x05.mdl","models/debug/debugwhite",Color(255,255,255,15),Vector(0.01,0.01,1),{}}
    hc=hc+1 ht[hc]={"streak_right","right_hand","right_hand",Vector(5,-2,0),Angle(0,0,0),"models/hunter/misc/cone1x05.mdl","models/debug/debugwhite",Color(255,255,255,15),Vector(0.01,0.01,1),{}}
    

    -- /\ /\ /\ INSERT CODE INSIDE HERE /\ /\ /\
    
    pthl.create_once = false
    
    function create_model()
        pthl.createHolos(hc,ht,false,size)
        
        pthl.create_once = true
    end
    
    
    local detail = 8
    
    local wing_mat = "models/props/de_nuke/nukconcretewalla"
    
    local wing_holos = {}
    for i = 1, detail do
        wing_holos[i] = hologram.create(chip():getPos(), Angle(), "models/hunter/misc/cone1x05.mdl", Vector())
        wing_holos[i]:setClip(1, true, Vector(0,0,0), Vector(-1,0,0), wing_holos[i])
        wing_holos[i]:setMaterial(wing_mat)
        
        wing_holos[i.."_bottom"] = hologram.create(chip():getPos(), Angle(), "models/hunter/misc/cone1x05.mdl", Vector())
        wing_holos[i.."_bottom"]:setParent(wing_holos[i])
        wing_holos[i.."_bottom"]:setClip(1, true, Vector(0,0,0), Vector(-1,0,0), wing_holos[i])
        wing_holos[i.."_bottom"]:setMaterial(wing_mat)
        
        wing_holos[i.."_right"] = hologram.create(chip():getPos(), Angle(), "models/hunter/misc/cone1x05.mdl", Vector())
        wing_holos[i.."_right"]:setClip(1, true, Vector(0,0,0), Vector(1,0,0), wing_holos[i.."_right"])
        wing_holos[i.."_right"]:setMaterial(wing_mat)
        
        wing_holos[i.."_bottom".."_right"] = hologram.create(chip():getPos(), Angle(), "models/hunter/misc/cone1x05.mdl", Vector())
        wing_holos[i.."_bottom".."_right"]:setParent(wing_holos[i.."_right"])
        wing_holos[i.."_bottom".."_right"]:setClip(1, true, Vector(0,0,0), Vector(1,0,0), wing_holos[i.."_right"])
        wing_holos[i.."_bottom".."_right"]:setMaterial(wing_mat)
    end
    
    local first = false
    local CT2 = 0
    local segment_positions = {}
    
    local left_leg = {}
    local right_leg = {}
    
    --[[
    function icos(A, B, C)
        return math.deg(math.acos((A^2 + B^2 - C^2) / (2*A*B)))
    end
    
    function toLocalAxis(ent,offset)
        local AxisLocal, _ = worldToLocal(offset,Angle(),Vector(),ent:getAngles())
        return AxisLocal
    end
    function leg_ik(BoneTable, Target)
        local LengthA = BoneTable["Length_A"]
        local LengthB = BoneTable["Length_B"]
        
        local Base = BoneTable["Base"]
        
        local HipA = BoneTable["Hip_A"]
        local HipB = BoneTable["Hip_B"]
        local Knee = BoneTable["Knee"]
        local Foot = BoneTable["Foot"]
        
        local reverseKnee = BoneTable["Reversed"] or false
        
        if not (LengthA and LengthB) then return end
        if not (Base and Base != nil and Base:isValid()) then return end
        if not (HipA and HipA != nil and HipA:isValid()) then return end
        if not (HipB and HipB != nil and HipB:isValid()) then return end
        if not (Knee and Knee != nil and Knee:isValid()) then return end
        if not (Foot and Foot != nil and Foot:isValid()) then return end
        
        local AxisWorld = Target - HipA:getPos()
        local AxisLocal = toLocalAxis(Base,AxisWorld)
        
        HipA:setAngles(Base:localToWorldAngles(Angle(0,0,math.deg(math.atan2(math.rad(AxisLocal.z),math.rad(AxisLocal.y))) + 90)))
        
        local AxisLocal = toLocalAxis(HipA,(Target - HipB:getPos()))
        local Distance = math.min(AxisLocal:getLength(), LengthA + LengthB)
        
        if reverseKnee then
            HipB:setAngles(HipA:localToWorldAngles(Angle(math.deg(math.atan2(math.rad(AxisLocal.x),math.rad(AxisLocal.z))) + icos(Distance, LengthA, LengthB), 0, 0)))
        else
            HipB:setAngles(HipA:localToWorldAngles(Angle(math.deg(math.atan2(math.rad(-AxisLocal.x),math.rad(AxisLocal.z))) + icos(Distance, LengthA, LengthB), 180, 0)))
        end
        
        Knee:setAngles(HipB:localToWorldAngles(Angle(icos(LengthB, LengthA, Distance) + 180, 0, 0)))
        Foot:setAngles(Base:getAngles())
    end
    ]]
    local ang_in = chip():getAngles()
    local _boost = 0
    local W = 0
    local S = 0
    local A = 0
    local D = 0
    
    local activate_ct = 0
    local activate_delta = 0
    local is_in_seat = false
    local offset_angle_normalized = Angle()
    
    local ragdoll_view = false
    
    function hidePlayer(bool)
        for k, v in pairs(pthl.holos) do
            v:setNoDraw(bool)
        end
        for k, v in pairs(wing_holos) do
            v:setNoDraw(bool)
        end
    end
    hook.add("think","main",function()
        if owner() and owner() != nil and owner():isValid() and owner():getHealth() > 0 then
            local frame_time = timer.frametime()*100
            W = W + (owner():keyDown(IN_KEY.FORWARD) and 1 or -1)*0.01*frame_time
            W = math.clamp(W,0,1)
            
            S = S + (owner():keyDown(IN_KEY.BACK) and 1 or -1)*0.01*frame_time
            S = math.clamp(S,0,1)
            
            A = A + (owner():keyDown(IN_KEY.MOVELEFT) and 1 or -1)*0.01*frame_time
            A = math.clamp(A,0,1)
            
            D = D + (owner():keyDown(IN_KEY.MOVERIGHT) and 1 or -1)*0.01*frame_time
            D = math.clamp(D,0,1)
            
            local in_vec = Vector(W - S, A - D, 0)
            
            local len = in_vec:getLength()
            if len > 1 then
                in_vec = in_vec / len
            end
            
            offset_angle_normalized = Angle(in_vec.x * 45, 0, 0):rotateAroundAxis(Vector(1,0,0),chip():getAngles().r) + Angle(0,in_vec.y * 45,0)
            if pthl.ready then
                if first != true then
                    first = true
                    for k, v in pairs(pthl.holos) do
                        v:setNoDraw(true)
                    end
                    for k, v in pairs(wing_holos) do
                        v:setNoDraw(true)
                    end
                    
                    player_ent = pthl.holos["player_ent"]
                    backpack = pthl.holos["backpack"]
                    
                    setup_player_model(player_ent)
                    
                    
                    player_ent:setLOD(0)
                    
                    wing_attach_bottom = pthl.holos["wing_attach_bottom"]
                    left_hand = pthl.holos["left_hand"]
                    right_hand = pthl.holos["right_hand"]
                    
                    afterburner = pthl.holos["afterburner"]
                    
                    streak_left = pthl.holos["streak_left"]
                    streak_right = pthl.holos["streak_right"]
                    
                    afterburner:setRenderMode(RENDERMODE.WORLDGLOW)
                    afterburner:suppressEngineLighting(true)
                    
                    streak_left:setRenderMode(RENDERMODE.WORLDGLOW)
                    streak_left:suppressEngineLighting(true)
                    
                    streak_right:setRenderMode(RENDERMODE.WORLDGLOW)
                    streak_right:suppressEngineLighting(true)
                    
                    player_ent:setPlayerColor(player_color_get)
                    
                    if player_model_is_valid != true and not HAS_BONES then
                        setup_player_model(player_ent)
                        timer.simple(0.05,function()
                            local bone_pos, bone_ang = player_ent:getBonePosition(bone_ids["Spine2"])
                            backpack:setParent(nil)
                            backpack:setPos(bone_pos)
                            backpack:setAngles(bone_ang)
                            backpack:setParent(player_ent, nil, bone_ids["Spine2"])
                            
                            local bone_pos, bone_ang = player_ent:getBonePosition(bone_ids["Spine"])
                            wing_attach_bottom:setParent(nil)
                            wing_attach_bottom:setPos(bone_pos)
                            wing_attach_bottom:setAngles(bone_ang)
                            wing_attach_bottom:setParent(player_ent, nil, bone_ids["Spine"])
                            
                            local bone_pos, bone_ang = player_ent:getBonePosition(bone_ids["L_Hand"])
                            left_hand:setParent(nil)
                            left_hand:setPos(bone_pos)
                            left_hand:setAngles(bone_ang)
                            left_hand:setParent(player_ent, nil, bone_ids["L_Hand"])
                            
                            local bone_pos, bone_ang = player_ent:getBonePosition(bone_ids["R_Hand"])
                            right_hand:setParent(nil)
                            right_hand:setPos(bone_pos)
                            right_hand:setAngles(bone_ang)
                            right_hand:setParent(player_ent, nil, bone_ids["R_Hand"])
                            
                            for i = 1, detail do
                                wing_holos[i]:setParent(backpack)
                                
                                wing_holos[i.."_right"]:setParent(backpack)
                            end
                            
                            bone_manipulate_lib.storeBoneAngles(player_ent,bone_ids)
                        end)
                    else
                        local bone_pos, bone_ang = player_ent:getBonePosition(bone_ids["Spine2"])
                        backpack:setParent(nil)
                        backpack:setPos(bone_pos)
                        backpack:setAngles(bone_ang)
                        backpack:setParent(player_ent, nil, bone_ids["Spine2"])
                        
                        local bone_pos, bone_ang = player_ent:getBonePosition(bone_ids["Spine"])
                        wing_attach_bottom:setParent(nil)
                        wing_attach_bottom:setPos(bone_pos)
                        wing_attach_bottom:setAngles(bone_ang)
                        wing_attach_bottom:setParent(player_ent, nil, bone_ids["Spine"])
                        
                        local bone_pos, bone_ang = player_ent:getBonePosition(bone_ids["L_Hand"])
                        left_hand:setParent(nil)
                        left_hand:setPos(bone_pos)
                        left_hand:setAngles(bone_ang)
                        left_hand:setParent(player_ent, nil, bone_ids["L_Hand"])
                        
                        local bone_pos, bone_ang = player_ent:getBonePosition(bone_ids["R_Hand"])
                        right_hand:setParent(nil)
                        right_hand:setPos(bone_pos)
                        right_hand:setAngles(bone_ang)
                        right_hand:setParent(player_ent, nil, bone_ids["R_Hand"])
                        
                        for i = 1, detail do
                            wing_holos[i]:setParent(backpack)
                            
                            wing_holos[i.."_right"]:setParent(backpack)
                        end
                        
                        bone_manipulate_lib.storeBoneAngles(player_ent,bone_ids)
                    end
                    
                    timer.simple(0.1,function()
                        --[[
                        local Left_Thigh_Pos, _ = player_ent:getBonePosition(bone_ids["L_Thigh"])
                        local Right_Thigh_Pos, _ = player_ent:getBonePosition(bone_ids["R_Thigh"])
                        
                        local Left_Knee_Pos, _ = player_ent:getBonePosition(bone_ids["L_Calf"])
                        local Right_Knee_Pos, _ = player_ent:getBonePosition(bone_ids["R_Calf"])
                        
                        local Left_Foot_Pos, _ = player_ent:getBonePosition(bone_ids["L_Foot"])
                        local Right_Foot_Pos, _ = player_ent:getBonePosition(bone_ids["R_Foot"])
                        
                        local Length_A = Left_Thigh_Pos:getDistance(Left_Knee_Pos)
                        local Length_B = Left_Knee_Pos:getDistance(Left_Foot_Pos)
                        
                        left_leg["Length_A"] = Length_A
                        left_leg["Length_B"] = Length_B
                        
                        left_leg["Base"] = player_ent
                        
                        left_leg["Hip_A"] = hologram.create(Left_Thigh_Pos, Angle(), "models/hunter/misc/cone1x05.mdl", Vector())
                        left_leg["Hip_A"]:setParent(player_ent)
                        
                        left_leg["Hip_B"] = hologram.create(Left_Thigh_Pos, Angle(), "models/hunter/misc/cone1x05.mdl", Vector())
                        left_leg["Hip_B"]:setParent(left_leg["Hip_A"])
                        
                        left_leg["Knee"] = hologram.create(left_leg["Hip_B"]:localToWorld(Vector(0,0,Length_A)), Angle(), "models/hunter/misc/cone1x05.mdl", Vector())
                        left_leg["Knee"]:setParent(left_leg["Hip_B"])
                        
                        left_leg["Foot"] = hologram.create(left_leg["Knee"]:localToWorld(Vector(0,0,Length_B)), Angle(), "models/hunter/misc/cone1x05.mdl", Vector())
                        left_leg["Foot"]:setParent(left_leg["Knee"])
                        
                        
                        
                        right_leg["Length_A"] = Length_A
                        right_leg["Length_B"] = Length_B
                        
                        right_leg["Base"] = player_ent
                        
                        right_leg["Hip_A"] = hologram.create(Right_Thigh_Pos, Angle(), "models/hunter/misc/cone1x05.mdl", Vector())
                        right_leg["Hip_A"]:setParent(player_ent)
                        
                        right_leg["Hip_B"] = hologram.create(Right_Thigh_Pos, Angle(), "models/hunter/misc/cone1x05.mdl", Vector())
                        right_leg["Hip_B"]:setParent(right_leg["Hip_A"])
                        
                        right_leg["Knee"] = hologram.create(right_leg["Hip_B"]:localToWorld(Vector(0,0,Length_A)), Angle(), "models/hunter/misc/cone1x05.mdl", Vector())
                        right_leg["Knee"]:setParent(right_leg["Hip_B"])
                        
                        right_leg["Foot"] = hologram.create(right_leg["Knee"]:localToWorld(Vector(0,0,Length_B)), Angle(), "models/hunter/misc/cone1x05.mdl", Vector())
                        right_leg["Foot"]:setParent(right_leg["Knee"])
                        ]]
                        timer.simple(0.2,function()
                            _READY = true
                            if sent != true then
                                sent = true
                                net.start("send_model")
                                net.writeString(player_ent:getModel())
                                net.send()
                            end
                        end)
                    end)
                end
                if _READY then
                    
                    local transition_to_flight = 1
                    
                    local boost_button = transition_to_flight == 1 and owner():keyDown(IN_KEY.SPEED) or false
                    
                    _boost = _boost + (boost_button and 0.1 or -0.1)*0.1*frame_time
                    _boost = math.clamp(_boost,0,transition_to_flight)
                    
                    activate_delta = math.easeOutSine(math.clamp(timer.curtime() - activate_ct,0,1))
                    
                    local ease_activate_anim = math.easeInOutSine(math.clamp(math.sin(math.rad(activate_delta*180))*1.5,0,1))
                    
                    if timer.curtime() - CT2 > (0.025 + 1*(1-(cpuMax()-cpuAverage())/cpuMax())) and cpuAverage()*1.1 < cpuMax() then
                        local delta = timer.curtime()-CT
                        
                        
                        if owner():inVehicle() then
                            if is_in_seat != true then
                                is_in_seat = true
                                activate_ct = timer.curtime()
                                hidePlayer(false)
                            end
                        else
                            if is_in_seat != false then
                                is_in_seat = false
                                hidePlayer(true)
                            end
                        end
                        
                        if boost_button then
                            if boost_button_toggle != true then
                                boost_button_toggle = true
                                afterburner:setColor(Color(0,255,255,125))
                            end
                        else
                            if boost_button_toggle != false then
                                boost_button_toggle = false
                                afterburner:setColor(Color(0,255,255,0))
                            end
                        end
                        
                        local local_ang_world = chip():localToWorldAngles(Angle(-90,0,0))
                        streak_left:setAngles(local_ang_world)
                        streak_right:setAngles(local_ang_world)
                        
                        local streak_length = chip():getVelocity():getLength()/53*0.25
                        
                        streak_left:setScale(Vector(0.01,0.01,streak_length/12))
                        streak_right:setScale(Vector(0.01,0.01,streak_length/12))
                        
                        local speed = math.clamp(_boost*2,0,1)+ease_activate_anim
                        local boost = math.easeInOutSine(speed)
                        local aim_ang = owner():getEyeAngles()+Angle(45*(W-S),45*(A-D),0)
                        aim_ang.r = math.clamp((ang_in.y-aim_ang.y)*5+(D-A)*90,-45,45)
                        ang_in = math.slerpQuaternion(ang_in:getQuaternion(),aim_ang:getQuaternion(),0.15):getEulerAngle()+Angle(math.sin(math.rad(timer.curtime()*(360+360*speed)+math.sin(math.rad(timer.curtime()*263)))),math.cos(math.rad(timer.curtime()*(360+360*speed)+math.sin(math.rad(timer.curtime()*118.7)))),0)*0.25
                        local cam_parent = chip()
                        
                        
                        player_ent:setPos(chip():localToWorld(Vector(-35,0,0)*transition_to_flight)+Vector(0,0,math.random(0,100)/10000))
                        player_ent:setAngles(cam_parent:localToWorldAngles(Angle(90*transition_to_flight,0,0)))
                        
                        local pitch_IN = (-25+ang_in.p)/90/(1+boost)*transition_to_flight
                        local yaw_IN = -math.clamp(cam_parent:worldToLocalAngles(ang_in).y/125/(1+boost),-1,1)*transition_to_flight
                        
                        local pitch = math.easeOutSine(pitch_IN)/(1+boost)*1.5
                        
                        local yaw = math.easeOutSine(yaw_IN)*1.5
                        
                        
                        local yaw_look = cam_parent:worldToLocalAngles(ang_in).y/20*transition_to_flight
                        local pitch_look = -(-75+cam_parent:worldToLocalAngles(ang_in).p-math.abs(yaw_look*10))/75*transition_to_flight
                        
                        
                        local wing_left_in = ((pitch/(1+math.abs(yaw)*0.3)+yaw*0.5)/(1+boost*2)+boost)
                        
                        local wing_right_in = ((pitch/(1+math.abs(yaw)*0.3)-yaw*0.5)/(1+boost*2)+boost)
                        
                        
                        local bone = "Pelvis"
                        local ang = Angle(15*yaw,3*yaw,1)
                        
                        local ang_but_transitioning = Angle(0,0,0)
                        
                        
                        local bone_id = bone_ids[bone]
                        player_ent:manipulateBoneAngles(bone_id, math.slerpQuaternion(ang_but_transitioning:getQuaternion(), ang:getQuaternion(), transition_to_flight):getEulerAngle())
                        
                        local bone = "Spine"
                        local ang = Angle(15*yaw,-4+10*pitch,15*yaw)/3
                        
                        local bone_id = bone_ids[bone]
                        player_ent:manipulateBoneAngles(bone_id, math.slerpQuaternion(ang_but_transitioning:getQuaternion(), ang:getQuaternion(), transition_to_flight):getEulerAngle())
                        
                        local bone = "Spine1"
                        local bone_id = bone_ids[bone]
                        player_ent:manipulateBoneAngles(bone_id, math.slerpQuaternion(ang_but_transitioning:getQuaternion(), ang:getQuaternion(), transition_to_flight):getEulerAngle())
                        
                        local bone = "Spine2"
                        local bone_id = bone_ids[bone]
                        player_ent:manipulateBoneAngles(bone_id, math.slerpQuaternion(ang_but_transitioning:getQuaternion(), ang:getQuaternion(), transition_to_flight):getEulerAngle())
                        
                        local bone = "Neck1"
                        local ang = Angle(10*yaw_look,30*pitch_look,10*yaw_look)/2
                        
                        local bone_id = bone_ids[bone]
                        player_ent:manipulateBoneAngles(bone_id, math.slerpQuaternion(ang_but_transitioning:getQuaternion(), ang:getQuaternion(), transition_to_flight):getEulerAngle())
                        
                        local bone = "Head1"
                        local ang = Angle(5*yaw_look,35*pitch_look,5*yaw_look)/1.5
                        
                        local bone_id = bone_ids[bone]
                        player_ent:manipulateBoneAngles(bone_id, math.slerpQuaternion(ang_but_transitioning:getQuaternion(), ang:getQuaternion(), transition_to_flight):getEulerAngle())
                        
                        
                        local bone = "L_Thigh"
                        local ang = Angle(-5+6*wing_right_in,15*math.clamp(math.easeInOutSine(-pitch_IN),0,1)+5*yaw,-8-4*yaw)
                        
                        local bone_id = bone_ids[bone]
                        player_ent:manipulateBoneAngles(bone_id, math.slerpQuaternion(ang_but_transitioning:getQuaternion(), ang:getQuaternion(), transition_to_flight):getEulerAngle())
                        
                        local bone = "R_Thigh"
                        local ang = Angle(5-6*wing_right_in,15*math.clamp(math.easeInOutSine(-pitch_IN),0,1)-5*yaw,8+4*yaw)
                        
                        local bone_id = bone_ids[bone]
                        player_ent:manipulateBoneAngles(bone_id, math.slerpQuaternion(ang_but_transitioning:getQuaternion(), ang:getQuaternion(), transition_to_flight):getEulerAngle())
                        
                        
                        local bone = "L_Calf"
                        local ang = Angle(0,8*math.clamp(math.easeInOutSine(pitch_IN),0,1)+25*math.easeOutSine(math.abs(yaw))/(1+math.easeInOutSine(math.clamp(-yaw,0,1))*6),0)
                        
                        local bone_id = bone_ids[bone]
                        player_ent:manipulateBoneAngles(bone_id, math.slerpQuaternion(ang_but_transitioning:getQuaternion(), ang:getQuaternion(), transition_to_flight):getEulerAngle())
                        
                        local bone = "R_Calf"
                        local ang = Angle(0,8*math.clamp(math.easeInOutSine(pitch_IN),0,1)+25*math.easeOutSine(math.abs(yaw))/(1+math.easeInOutSine(math.clamp(yaw,0,1))*6),0)
                        
                        local bone_id = bone_ids[bone]
                        player_ent:manipulateBoneAngles(bone_id, math.slerpQuaternion(ang_but_transitioning:getQuaternion(), ang:getQuaternion(), transition_to_flight):getEulerAngle())
                        
                        
                        local bone = "L_Foot"
                        local ang = Angle(0,30,0)
                        
                        local bone_id = bone_ids[bone]
                        player_ent:manipulateBoneAngles(bone_id, math.slerpQuaternion(ang_but_transitioning:getQuaternion(), ang:getQuaternion(), transition_to_flight):getEulerAngle())
                        
                        
                        local bone = "R_Foot"
                        local ang = Angle(0,30,0)
                        
                        local bone_id = bone_ids[bone]
                        player_ent:manipulateBoneAngles(bone_id, math.slerpQuaternion(ang_but_transitioning:getQuaternion(), ang:getQuaternion(), transition_to_flight):getEulerAngle())
                        
                        
                        
                        local bone = "L_UpperArm"
                        local ang = Angle(-5+35*wing_left_in,5+20*math.abs(yaw)+10*wing_left_in,-45-15*(yaw-pitch/(1+math.abs(yaw)*0.3))):rotateAroundAxis(Vector(0,1*math.sin(math.rad(yaw*45)),1),5*(-yaw+pitch/(1+math.abs(yaw)*0.3)*0.4))
                        
                        local bone_id = bone_ids[bone]
                        player_ent:manipulateBoneAngles(bone_id, math.slerpQuaternion(ang_but_transitioning:getQuaternion(), ang:getQuaternion(), transition_to_flight):getEulerAngle())
                        
                        local bone = "L_Forearm"
                        local ang = Angle(0,25*math.clamp((pitch/(1+math.abs(yaw)*0.3)-1)/2,-1,0),0)
                        
                        local bone_id = bone_ids[bone]
                        player_ent:manipulateBoneAngles(bone_id, math.slerpQuaternion(ang_but_transitioning:getQuaternion(), ang:getQuaternion(), transition_to_flight):getEulerAngle())
                        
                        local bone = "R_UpperArm"
                        local ang = Angle(5-35*wing_right_in,5+20*math.abs(yaw)+10*wing_left_in,45+15*(-yaw-pitch/(1+math.abs(yaw)*0.3))):rotateAroundAxis(Vector(0,1*math.sin(math.rad(yaw*45)),1),5*(yaw+pitch/(1+math.abs(yaw)*0.3)*0.4))
                        
                        local bone_id = bone_ids[bone]
                        player_ent:manipulateBoneAngles(bone_id, math.slerpQuaternion(ang_but_transitioning:getQuaternion(), ang:getQuaternion(), transition_to_flight):getEulerAngle())
                        
                        local bone = "R_Forearm"
                        local ang = Angle(0,25*math.clamp((pitch/(1+math.abs(yaw)*0.3)-1)/2,-1,0),0)
                        
                        local bone_id = bone_ids[bone]
                        player_ent:manipulateBoneAngles(bone_id, math.slerpQuaternion(ang_but_transitioning:getQuaternion(), ang:getQuaternion(), transition_to_flight):getEulerAngle())
                        
                        
                        local top_corner_pos = backpack:localToWorld(Vector(9,0,7))
                        local start_pos = wing_attach_bottom:localToWorld(Vector(-2*2,0,6))
                        local end_pos_no_excess = left_hand:getPos()
                        local end_pos = end_pos_no_excess + (start_pos-top_corner_pos):getNormalized()*2
                        
                        local top_pos = top_corner_pos - (start_pos-top_corner_pos):getNormalized()*20
                        
                        local wing_dir = (end_pos - start_pos):getNormalized()
                        
                        for i = 1, detail do
                            local base_pos = math.lerpVector(math.lerp(0.25,((i - 0.5)/detail),math.easeInOutSine((i - 0.5)/detail)), start_pos, end_pos_no_excess)
                            local up = (top_pos - base_pos):getNormalized()
                            local offset = -up*25*0.1 - up*2*(i/detail)
                            segment_positions[i] = base_pos + offset
                        end
                        
                        for i = 1, detail do
                            local _pos = segment_positions[i]
                            local up = (top_pos - _pos):getNormalized()
                            local forward = (start_pos - end_pos_no_excess):getNormalized()
                            local right = up:cross(forward):getNormalized()
                            forward = right:cross(up):getNormalized()
                            
                            local m = Matrix()
                            m:setForward(right)
                            m:setRight(forward)
                            m:setUp(up)
                            
                            local _ang = m:getAngles()
                            
                            local _width
                            if i < detail then
                                _width = _pos:getDistance(segment_positions[i+1])
                            else
                                _width = _pos:getDistance(segment_positions[i-1])
                            end
                            
                            local _thickness = 1
                            local scale = Vector(_thickness*(0.05+math.sin(math.rad((i/detail)*180))*0.95), _width / 2 + _pos:getDistance(end_pos_no_excess)/detail*(i==detail and 0.06 or 0.25)*i/detail, (top_pos - _pos):getLength() / 2) / Vector(24, 24, 12)
                            
                            wing_holos[i]:setPos(_pos)
                            wing_holos[i]:setAngles(_ang)
                            wing_holos[i]:setScale(scale)
                            wing_holos[i.."_bottom"]:setScale(scale * Vector(-1, 1, 1))
                            
                            
                            local local_normal = player_ent:worldToLocalAngles(wing_dir:rotateAroundAxis(right,90):getAngleEx(right))
                            local local_pos = player_ent:worldToLocal(start_pos)
                            
                            wing_holos[i]:setClip(2, true, local_pos, local_normal:getForward(), player_ent)
                            wing_holos[i.."_bottom"]:setClip(2, true, local_pos, local_normal:getForward(), player_ent)
                            
                            local local_normal = player_ent:worldToLocalAngles((end_pos_no_excess - top_corner_pos):getNormalized():rotateAroundAxis(right, -90):getAngleEx(right))
                            local local_pos = player_ent:worldToLocal(top_corner_pos)
                            
                            wing_holos[i]:setClip(3, true, local_pos, local_normal:getForward(), player_ent)
                            wing_holos[i.."_bottom"]:setClip(3, true, local_pos, local_normal:getForward(), player_ent)
                        end
                        local top_corner_pos = backpack:localToWorld(Vector(9,0,-7))
                        local start_pos = wing_attach_bottom:localToWorld(Vector(-2*2,0,-6))
                        local end_pos_no_excess = right_hand:getPos()
                        local end_pos = end_pos_no_excess + (start_pos-top_corner_pos):getNormalized()*2
                        
                        local top_pos = top_corner_pos - (start_pos-top_corner_pos):getNormalized()*20
                        
                        local wing_dir = (end_pos - start_pos):getNormalized()
                        
                        for i = 1, detail do
                            local base_pos = math.lerpVector(math.lerp(0.25,((i - 0.5)/detail),math.easeInOutSine((i - 0.5)/detail)), start_pos, end_pos_no_excess)
                            local up = (top_pos - base_pos):getNormalized()
                            local offset = -up*25*0.1 - up*2*(i/detail)
                            segment_positions[i.."_right"] = base_pos + offset
                        end
                        
                        for i = 1, detail do
                            local _pos = segment_positions[i.."_right"]
                            local up = (top_pos - _pos):getNormalized()
                            local forward = (start_pos - end_pos_no_excess):getNormalized()
                            local right = up:cross(forward):getNormalized()
                            forward = right:cross(up):getNormalized()
                            
                            local m = Matrix()
                            m:setForward(right)
                            m:setRight(forward)
                            m:setUp(up)
                            
                            local _ang = m:getAngles()
                            
                            local _width
                            if i < detail then
                                _width = _pos:getDistance(segment_positions[(i+1).."_right"])
                            else
                                _width = _pos:getDistance(segment_positions[(i-1).."_right"])
                            end
                            
                            local _thickness = 1
                            local scale = Vector(_thickness*(0.05+math.sin(math.rad((i/detail)*180))*0.95), _width / 2 + _pos:getDistance(end_pos_no_excess)/detail*(i==detail and 0.06 or 0.25)*i/detail, (top_pos - _pos):getLength() / 2) / Vector(24, 24, 12)
                            
                            wing_holos[i.."_right"]:setPos(_pos)
                            wing_holos[i.."_right"]:setAngles(_ang)
                            wing_holos[i.."_right"]:setScale(scale)
                            wing_holos[i.."_bottom".."_right"]:setScale(scale * Vector(-1, 1, 1))
                            
                            
                            local local_normal = player_ent:worldToLocalAngles(wing_dir:rotateAroundAxis(right,90):getAngleEx(right))
                            local local_pos = player_ent:worldToLocal(start_pos)
                            
                            wing_holos[i.."_right"]:setClip(2, true, local_pos, local_normal:getForward(), player_ent)
                            wing_holos[i.."_bottom".."_right"]:setClip(2, true, local_pos, local_normal:getForward(), player_ent)
                            
                            local local_normal = player_ent:worldToLocalAngles((end_pos_no_excess - top_corner_pos):getNormalized():rotateAroundAxis(right, -90):getAngleEx(right))
                            local local_pos = player_ent:worldToLocal(top_corner_pos)
                            
                            wing_holos[i.."_right"]:setClip(3, true, local_pos, local_normal:getForward(), player_ent)
                            wing_holos[i.."_bottom".."_right"]:setClip(3, true, local_pos, local_normal:getForward(), player_ent)
                        end
                        CT2 = timer.curtime()
                    end
                end
            else
                if pthl.create_once != true then
                    create_model()
                end
            end
            CT = timer.curtime()
        end
    end)
    
    local seat = nil
    local ragdoll_ent = nil
    hook.add("net","",function(name,len,ply)
        if name == "send_seat" then
            seat = net.readEntity()
        end
        if name == "send_ragdoll" then
            ragdoll_ent = net.readEntity()
        end
        if name == "activate_ragdoll" then
            ragdoll_view = net.readBool()
            hidePlayer(true)
        end
    end)
    
    if player() == owner() then
        enableHud(owner(), true)
        
        local angle_lerp = owner():getEyeAngles()
        
        hook.add("CalcView", "", function(pos, ang, fov, znear, zfar)
            if ragdoll_ent and ragdoll_ent != nil and ragdoll_ent:isValid() then
                if ragdoll_view then
                    return {
                        origin = ragdoll_ent:getPos() - owner():getEyeAngles():getForward() * 100,
                        angles = owner():getEyeAngles(),
                        fov = 100
                    }
                end
            end
            if (not ragdoll_view) and seat and seat != nil and seat:isValid() and player_ent and player_ent != nil and player_ent:isValid() then
                if owner():inVehicle() and owner():getVehicle() == seat then
                    local is_boosting_mult = math.easeInOutSine(math.sin(math.rad(_boost*90)))
                    local angle_in = owner():getEyeAngles()+offset_angle_normalized*0.5
                    angle_in.r = chip():getAngles().r*0.25-offset_angle_normalized.y*0.5
                    angle_lerp = math.slerpQuaternion(angle_lerp:getQuaternion(), angle_in:getQuaternion(), 0.025):getEulerAngle()
                    local pos_in = player_ent:localToWorld(Vector(35*offset_angle_normalized.p/45,35*offset_angle_normalized.y/45,0)+Vector(-25,0,60-80*activate_delta))+(4+math.sin(math.rad(timer.curtime()*128)))*Vector(math.sin(math.rad(timer.curtime()*360+math.sin(math.rad(timer.curtime()*263)))),math.cos(math.rad(timer.curtime()*360+math.sin(math.rad(timer.curtime()*118.7)))),0)*0.25+Vector(20*is_boosting_mult-55*activate_delta,0,0):getRotated(angle_lerp)
                    return {
                        origin = pos_in,
                        angles = angle_lerp,
                        fov = 25+75*activate_delta+25*is_boosting_mult
                    }
                else
                    angle_lerp = owner():getEyeAngles()
                end
            end
        end)
        
        function scale_3d(pos)
            local POSTOSCREEN = (pos+Vector(0,0,100):getRotated(owner():getEyeAngles())):toScreen()
            local POSTOSCREEN2 = pos:toScreen()
            return Vector(POSTOSCREEN["x"],POSTOSCREEN["y"],0):getDistance(Vector(POSTOSCREEN2["x"],POSTOSCREEN2["y"],0))
        end
        local w, h = render.getGameResolution()
        hook.add("DrawHUD","",function()
            if owner():inVehicle() and owner():getVehicle() == seat and not ragdoll_view then
                local pos = (chip():getPos()+chip():getForward()*1000):toScreen()
                render.drawFilledCircle(pos["x"],pos["y"],2)
                
                local pos = (chip():getPos()+(owner():getEyeAngles()+offset_angle_normalized):getForward()*1000):toScreen()
                render.drawCircle(pos["x"],pos["y"],8)
                
                render.setColor(Color(0,0,0,255*(1-activate_delta)))
                render.drawRect(0,0,w,h)
            end
        end)
        
        local glow = material.load("sprites/light_glow02_add")
        local beam = material.load("effects/lamp_beam")
        
        local SpriteSize_IN = 7
        local SpriteSize2_IN = 3
        local Rotation = Angle(-18,-90,-90)
        local Offset = Vector(0,-0.1,3.5)
        hook.add("predrawtranslucentrenderables","",function()
            if owner():inVehicle() and owner():getVehicle() == seat and afterburner and afterburner != nil and afterburner:isValid() and not ragdoll_view then
                
                render.pushViewMatrix({type = "3D"})
                
                render.setColor(Color(0,255,255))
                
                render.setMaterial(glow)
                
                local _boost_mult = owner():keyDown(IN_KEY.SPEED) and 1 or 0
                local SpriteSize = SpriteSize_IN*_boost_mult
                local SpriteSize2 = SpriteSize2_IN*_boost_mult
                
                
                render.draw3DQuad(afterburner:localToWorld(Offset+Vector(0,SpriteSize,-SpriteSize):getRotated(Rotation)),afterburner:localToWorld(Offset+Vector(0,-SpriteSize,-SpriteSize):getRotated(Rotation)),afterburner:localToWorld(Offset+Vector(0,-SpriteSize,SpriteSize):getRotated(Rotation)),afterburner:localToWorld(Offset+Vector(0,SpriteSize,SpriteSize):getRotated(Rotation)))
                render.draw3DQuad(afterburner:localToWorld(Offset+Vector(0,SpriteSize2,-SpriteSize2):getRotated(Rotation)),afterburner:localToWorld(Offset+Vector(0,-SpriteSize2,-SpriteSize2):getRotated(Rotation)),afterburner:localToWorld(Offset+Vector(0,-SpriteSize2,SpriteSize2):getRotated(Rotation)),afterburner:localToWorld(Offset+Vector(0,SpriteSize2,SpriteSize2):getRotated(Rotation)))
                
                render.setMaterial(beam)
                
                render.draw3DBeam(afterburner:localToWorld(Offset),afterburner:localToWorld(Offset+Vector(0,-1,20)*_boost_mult), 4, 0, 0.99)
                render.popViewMatrix()
            end
        end)
    end
end
