--@name Turn Based Combat
--@author Nakkitsunami
--@shared
--@include nakilibs/screen_shatter_obj.txt

if SERVER then

chip():setColor(Color(255,255,255,0))

local hud = prop.createComponent(chip():getPos(), chip():getAngles(), "starfall_hud", "models/props_combine/breenglobe.mdl", true)
hud:setColor(Color(255,255,255,0))

local seat = prop.createSeat(chip():getPos()+Vector(0,0,100), Angle(90,0,0), "models/hunter/blocks/cube025x025x025.mdl", true)
seat:setNocollideAll(true)
seat:setColor(Color(255,255,255,0))

hook.add("net","",function(name,len,ply)
    if name == "sit" then
        seat:setPos(owner():getPos())
        seat:setAngles(Angle(90,owner():getEyeAngles().yaw,0))
        seat:use(USE_ON, 0)
    end
    if name == "exit_seat" then
        seat:setAngles(Angle(0,seat:getAngles().yaw,0))
        seat:ejectDriver()
        seat:setPos(chip():getPos()+Vector(0,0,100))
    end
end)
else
require("nakilibs/screen_shatter_obj.txt")


local pos_data = {
    ["mesh.001"] = {-0.171805,-0.407767},
    ["mesh.002"] = {-0.954938,0.971595},
    ["mesh.003"] = {-1.739233,0.940437},
    ["mesh.004"] = {-0.570632,0.909736},
    ["mesh.005"] = {-1.303436,0.936276},
    ["mesh.006"] = {-0.203379,0.843699},
    ["mesh.007"] = {0.150101,0.922609},
    ["mesh.008"] = {0.533610,0.987833},
    ["mesh.009"] = {0.937146,0.936842},
    ["mesh.010"] = {1.359607,0.888593},
    ["mesh.011"] = {1.682766,0.933334},
    ["mesh.012"] = {1.673605,0.613381},
    ["mesh.013"] = {1.077947,0.558271},
    ["mesh.014"] = {0.322611,0.598012},
    ["mesh.015"] = {1.347392,0.667702},
    ["mesh.016"] = {0.791771,0.686995},
    ["mesh.017"] = {-0.155528,0.525079},
    ["mesh.018"] = {-0.630666,0.646415},
    ["mesh.019"] = {-0.329203,0.637133},
    ["mesh.020"] = {-1.293827,0.578981},
    ["mesh.021"] = {-0.891584,0.561629},
    ["mesh.022"] = {-1.776366,0.292720},
    ["mesh.023"] = {-1.727507,0.581406},
    ["mesh.024"] = {-1.776366,0.035577},
    ["mesh.025"] = {-1.577972,-0.095224},
    ["mesh.026"] = {-1.334629,0.062668},
    ["mesh.027"] = {-1.279845,0.298641},
    ["mesh.028"] = {-0.973303,0.365069},
    ["mesh.029"] = {-0.834984,0.178854},
    ["mesh.030"] = {-1.086766,-0.053953},
    ["mesh.031"] = {-1.026764,-0.271864},
    ["mesh.032"] = {-1.286206,-0.393728},
    ["mesh.033"] = {-1.589551,-0.333709},
    ["mesh.034"] = {-1.787945,-0.511478},
    ["mesh.035"] = {-1.414104,-0.611575},
    ["mesh.036"] = {-1.792000,-0.977143},
    ["mesh.037"] = {-1.552872,-0.861078},
    ["mesh.038"] = {-1.296872,-0.963935},
    ["mesh.039"] = {-0.924891,-0.912171},
    ["mesh.040"] = {-0.576316,-0.972293},
    ["mesh.041"] = {-0.320316,-0.972293},
    ["mesh.042"] = {0.405252,-0.971583},
    ["mesh.043"] = {0.913915,-0.928279},
    ["mesh.044"] = {1.692793,-0.874937},
    ["mesh.045"] = {1.342359,-0.866990},
    ["mesh.046"] = {1.613917,-0.602581},
    ["mesh.047"] = {1.339219,-0.662988},
    ["mesh.048"] = {0.958308,-0.622744},
    ["mesh.049"] = {0.484549,-0.607074},
    ["mesh.050"] = {-0.227853,-0.723774},
    ["mesh.051"] = {0.230219,-0.810452},
    ["mesh.052"] = {-0.929843,-0.659104},
    ["mesh.053"] = {-0.657426,-0.569039},
    ["mesh.054"] = {-0.713613,-0.346361},
    ["mesh.055"] = {-0.437275,-0.238512},
    ["mesh.056"] = {0.063390,-0.297924},
    ["mesh.057"] = {0.378037,-0.399519},
    ["mesh.058"] = {0.617933,-0.200835},
    ["mesh.059"] = {0.907694,-0.214764},
    ["mesh.060"] = {1.095692,-0.370577},
    ["mesh.061"] = {1.351339,-0.270296},
    ["mesh.062"] = {1.676129,-0.352112},
    ["mesh.063"] = {1.789978,-0.056341},
    ["mesh.064"] = {1.447758,-0.009176},
    ["mesh.065"] = {1.037228,-0.007509},
    ["mesh.066"] = {1.715785,0.344824},
    ["mesh.067"] = {1.459650,0.241171},
    ["mesh.068"] = {0.992066,0.260572},
    ["mesh.069"] = {0.628215,0.212692},
    ["mesh.070"] = {0.419122,0.342209},
    ["mesh.071"] = {0.488712,0.010792},
    ["mesh.072"] = {0.137539,0.001348},
    ["mesh.073"] = {0.184733,0.230184},
    ["mesh.074"] = {-0.197342,0.293773},
    ["mesh.075"] = {-0.181386,0.053905},
    ["mesh.076"] = {-0.441742,-0.021557},
    ["mesh.077"] = {-0.571249,0.186904}
}

local battle_music = {}

local block_switch = true

local assets_downloaded = false

local HASFILES = true

function downloadMusic()
    if HASFILES and owner() == player() then
        print("Sounds loaded from files!")
        bass.loadFile("sound/naki/turn based combat/battle start betterer.mp3", "2d noblock noplay", function(snd)
            if snd then
                battle_music["start"] = snd
                battle_music["start"]:pause()
                battle_music["start"]:setTime(0,true)
                battle_music["start"]:setLooping(false)
            end
        end)
        
        bass.loadFile("sound/naki/turn based combat/battle loop.mp3", "2d noblock noplay", function(snd)
            if snd then
                battle_music["loop"] = snd
                battle_music["loop"]:pause()
                battle_music["loop"]:setTime(0,true)
                battle_music["loop"]:setLooping(true)
            end
        end)
        
        bass.loadFile("sound/naki/turn based combat/win.mp3", "2d noblock noplay", function(snd)
            if snd then
                battle_music["win"] = snd
                battle_music["win"]:pause()
                battle_music["win"]:setTime(0,true)
                battle_music["win"]:setLooping(false)
            end
        end)
    else
        printHud(player(), "Downloading sounds")
        bass.loadURL("https://dl.dropboxusercontent.com/scl/fi/d1a1df6a8ox2pu0uwe1ra/battle-start-betterer.mp3?rlkey=e1qi8s2cuf74nzem4uh5ra68j&dl=0", "2d noblock noplay", function(snd)
            if snd then
                battle_music["start"] = snd
                battle_music["start"]:pause()
                battle_music["start"]:setTime(0,true)
                battle_music["start"]:setLooping(false)
            end
        end)
        
        bass.loadURL("https://dl.dropboxusercontent.com/scl/fi/btc84p1t1tx1o7o46dxwn/battle-loop.mp3?rlkey=68k35rn710misd1vtk5btgvwy&dl=1", "2d noblock noplay", function(snd)
            if snd then
                battle_music["loop"] = snd
                battle_music["loop"]:pause()
                battle_music["loop"]:setTime(0,true)
                battle_music["loop"]:setLooping(true)
            end
        end)
        
        bass.loadURL("https://dl.dropboxusercontent.com/scl/fi/tok4m93s2slsleyp1y9s6/win.mp3?rlkey=8umzob8y6474f51xpab8tsxir&dl=1", "2d noblock noplay", function(snd)
            if snd then
                battle_music["win"] = snd
                battle_music["win"]:pause()
                battle_music["win"]:setTime(0,true)
                battle_music["win"]:setLooping(false)
            end
        end)
    end
end

if player() == owner() then
    enableHud(owner(), true)
    downloadMusic()
end

hook.add("HUDConnected", "", function(ent, ply)
    if ply != owner() then
        downloadMusic()
    end
end)

function startMusicSystem()
    battle_music["start"]:play()
    battle_music["start"]:setVolume(1)
    battle_music["start"]:setTime(0,true)
    timer.create("start_loop",25.85,1,function()
        battle_music["loop"]:play()
        battle_music["loop"]:setTime(0,true)
        battle_music["loop"]:setVolume(1)
        battle_music["start"]:pause()
    end)
end
function stopMusicSystem(escape)
    block_switch = true
    local stopMusicCT = timer.curtime() + (escape and 4 or 0)
    hook.add("think","stop_music",function()
        volume = math.clamp(1-(timer.curtime()-stopMusicCT)*0.8,0,1)
        battle_music["loop"]:setVolume(volume)
        battle_music["start"]:setVolume(volume)
        if volume <= 0 then
            timer.stop("start_loop")
            battle_music["loop"]:setTime(0,false)
            battle_music["loop"]:pause()
            battle_music["start"]:setTime(0,false)
            battle_music["start"]:pause()
            hook.remove("think","stop_music")
        end
    end)
    if escape then
        timer.simple(2,function()
            block_switch = false
        end)
    else
        timer.simple(1,function()
            battle_music["win"]:play()
            battle_music["win"]:setTime(0,false)
            local stopWinMusicCT = timer.curtime()
            hook.add("think","stop_win_music",function()
                volume = math.clamp(5-(timer.curtime()-stopWinMusicCT)*0.5,0,1)
                battle_music["win"]:setVolume(volume)
                if volume <= 0 then
                    block_switch = false
                    battle_music["win"]:pause()
                    hook.remove("think","stop_win_music")
                end
            end)
        end)
    end
    
end

local screen_blocker = hologram.create(Vector(),Angle(0,0,0),"models/hunter/blocks/cube025x025x025.mdl",Vector(0.01,20,11)/5.5)
screen_blocker:setMaterial("models/debug/debugwhite")
screen_blocker:suppressEngineLighting(true)
screen_blocker:setNoDraw(true)

render.createRenderTarget("rt")
local capture_screen_mat = material.load("pp/blurscreen")

local captured_frame = material.create("UnlitGeneric")
captured_frame:setInt("$translucent", 0)
captured_frame:setInt("$alphatest", 0)
captured_frame:setFloat("$alpha", 1)



action_bar = material.create("UnlitGeneric")
action_bar:setTextureURL("$basetexture", "https://dl.dropboxusercontent.com/scl/fi/51nfxmgykfuw48tac2wd0/action_bar_new_but_also_new.png?rlkey=wjzjkuq7rwdn2udmi5p1q9bom&dl=1", nil, nil)

action_selection_arrow = material.create("UnlitGeneric")
action_selection_arrow:setTextureURL("$basetexture", "https://dl.dropboxusercontent.com/scl/fi/u96glg1cdg8x8nwj3j5qr/action_selection_arrow_new.png?rlkey=woq0oy9gwj0x9k10bw4fc7klx&dl=1", nil, nil)

selection_bar = material.create("UnlitGeneric")
selection_bar:setTextureURL("$basetexture", "https://dl.dropboxusercontent.com/scl/fi/vo5hq7soqyanfncj0kp3a/selection_bar_new.png?rlkey=2sfp3si8t92vvngx229toscc7&dl=1", nil, nil)

selection_bar_highlight = material.create("UnlitGeneric")
selection_bar_highlight:setTextureURL("$basetexture", "https://dl.dropboxusercontent.com/scl/fi/9c17pkl4vaiy3mmlupagl/selection_bar_highlight_new.png?rlkey=lwedq5gts74ek2qfycdc1c83l&dl=1", nil, nil)

player_selection_arrow = material.create("UnlitGeneric")
player_selection_arrow:setTextureURL("$basetexture", "https://dl.dropboxusercontent.com/scl/fi/rxkkg27bwk5s3b7ycys70/player_selection_arrow_new.png?rlkey=6lj997c9f80vpi5gc3iuiisgz&dl=1", nil, nil)

target_selection_arrow = material.create("UnlitGeneric")
target_selection_arrow:setTextureURL("$basetexture", "https://dl.dropboxusercontent.com/scl/fi/kudxeanxy2t9dxiwbilr0/target_selection_arrow_new.png?rlkey=z0dhxojrzpnrvnk38vxl8cfa5&dl=1", nil, nil)


local selection = 1

local flip_target_arrow = false

local action_state = "waiting"

local monster_table = {}

local distance = 400
function summon_enemies(count)
    for i = 1, #monster_table do
        if monster_table[i] then
            monster_table[i]:remove()
        end
    end
    monster_table = {}
    if count == 1 then
        monster_table[1] = hologram.create(chip():getPos()+Vector(-distance/2,0,0), Angle(0,0,0), "models/player/zombie_classic.mdl", Vector(1))
    elseif count == 2 then
        monster_table[1] = hologram.create(chip():getPos()+Vector(distance/2,0,0)+Vector(-distance,0,0):rotateAroundAxis(Vector(0,0,1),12), Angle(0,12,0), "models/player/zombie_classic.mdl", Vector(1))
        monster_table[2] = hologram.create(chip():getPos()+Vector(distance/2,0,0)+Vector(-distance,0,0):rotateAroundAxis(Vector(0,0,1),-12), Angle(0,-12,0), "models/player/zombie_classic.mdl", Vector(1))
    elseif count >= 3 then
        monster_table[1] = hologram.create(chip():getPos()+Vector(distance/2,0,0)+Vector(-distance,0,0):rotateAroundAxis(Vector(0,0,1),20), Angle(0,20,0), "models/player/zombie_classic.mdl", Vector(1))
        monster_table[2] = hologram.create(chip():getPos()+Vector(-distance/2,0,0), Angle(0,0,0), "models/player/zombie_classic.mdl", Vector(1))
        monster_table[3] = hologram.create(chip():getPos()+Vector(distance/2,0,0)+Vector(-distance,0,0):rotateAroundAxis(Vector(0,0,1),-20), Angle(0,-20,0), "models/player/zombie_classic.mdl", Vector(1))
    end
    for i = 1, #monster_table do
        monster_table[i].health = 100
        monster_table[i].pos = monster_table[i]:getPos()
        monster_table[i]:setAnimation("zombie_run", timer.curtime()*2, nil)
        monster_table[i].attacking = false
    end
end

local target = monster_table[1]

local player_ent = hologram.create(chip():getPos()+Vector(distance/2,0,0), Angle(0,180,0), owner():getModel(), Vector(1))
player_ent:setNoDraw(true)
player_ent.pos = player_ent:getPos()
player_ent:setAnimation("run_melee", nil, 1)
player_ent.health = 1000
player_ent.special_bar = 0

local crowbar = hologram.create(chip():getPos(), Angle(0,0,0), "models/weapons/w_crowbar.mdl", Vector(1))
crowbar:setNoDraw(true)
crowbar:setParent(player_ent)
crowbar:addEffects(EF.BONEMERGE)

local gravity_gun = hologram.create(chip():getPos(), Angle(0,0,0), "models/weapons/w_physics.mdl", Vector(1))
gravity_gun:setNoDraw(true)
gravity_gun:setParent(player_ent)
gravity_gun:addEffects(EF.BONEMERGE)

local select_ct = 0


local Width, Height = render.getGameResolution()

local frame_captured = false
local requested_frame = false


local holos = {}
local holos2 = {}
local new_index = 0

local models_ready = false

local obj_data = unholy_obj_table


function create_mesh()
    if obj_data and obj_data != nil then
        obj = mesh.createFromObj(obj_data)
        hook.add("think","obj_parse",function()
            if obj and obj != nil then
                for index, data in pairs(obj) do
                    new_index = new_index + 1
                    holos[new_index] = hologram.create(Vector(pos_data[string.sub(index,1,8)][2],pos_data[string.sub(index,1,8)][1],0)*10,Angle(0,90,-90),"models/hunter/blocks/cube025x025x025.mdl",Vector(10))
                    holos[new_index]:setMesh(obj[index])
                    holos[new_index]:setMaterial("!"..captured_frame:getName())
                    holos[new_index]:suppressEngineLighting(true)
                    holos[new_index]:setNoDraw(true)
                    
                    holos[new_index].pos = {pos_data[string.sub(index,1,8)][2],pos_data[string.sub(index,1,8)][1],math.random(0,20)}
                    holos[new_index].ang = Angle(math.random(-45,45),math.random(-75,75),math.random(-25,25))
                    holos[new_index].done = false
                    
                    local holo = hologram.create(holos[new_index]:localToWorld(Vector(0,0,0)),holos[new_index]:localToWorldAngles(Angle(0,0,0)),"models/hunter/blocks/cube025x025x025.mdl",Vector(10))
                    holo:setMesh(obj[index])
                    holo:setMaterial("models/debug/debugwhite")
                    holo:setColor(Color(255,255,255,math.random(0,15)/15*5))
                    holo:setRenderMode(RENDERMODE.WORLDGLOW)
                    holo:suppressEngineLighting(true)
                    holo:setNoDraw(true)
                    holo:setParent(holos[new_index])
                    holos[new_index].layer = holo
                    
                    hook.remove("think","obj_parse")
                    models_ready = true
                end
                table.sort(holos, function(a, b)
                    local ax = a.pos[2]
                    local bx = b.pos[2]
                    return ax < bx
                end)
            end
        end)
        
    end
end
local activate_camera = false

local animation_time = 0
function capture_frame()
    block_switch = true
    frame_captured = false
    local ct = timer.curtime()
    screen_blocker:setNoDraw(false)
    action_state = "waiting"
    timer.simple(5,function()
        block_switch = false
    end)
    hook.add("drawhud", "copy_material", function()
        render.selectRenderTarget("rt")
        render.setLightingMode(2)
        render.suppressEngineLighting(false)
        render.setMaterial(capture_screen_mat)
        render.drawTexturedRect(0, 0, 1024, 1024)
        render.selectRenderTarget()
        
        captured_frame:setTextureRenderTarget("$basetexture", "rt")
        
        if player() == owner() then
            timer.simple(0.5,function()
                concmd("pp_motionblur_drawalpha 0.95; pp_motionblur_delay 0; pp_motionblur_addalpha 0.12; pp_motionblur 1")
                player_ent:setNoDraw(false)
                crowbar:setNoDraw(false)
                summon_enemies(math.round(math.random(1,3)))
                timer.simple(0.75,function()
                    concmd("pp_motionblur_addalpha 0.18")
                    timer.simple(1,function()
                        concmd("pp_motionblur_addalpha 0.22")
                        timer.simple(1,function()
                            concmd("pp_motionblur 0")
                            action_state = "select action"
                            select_ct = timer.curtime()
                        end)
                    end)
                end)
            end)
        end
        
        frame_captured = true
        activate_camera = true
        if models_ready != true then
            create_mesh()
        else
            for index, holo in pairs(holos) do
                holo:setMaterial("!"..captured_frame:getName())
                holo.ang = Angle(math.random(-45,45),math.random(-75,75),math.random(-25,25))
                holo.done = false
            end
        end
        net.start("sit")
        net.send()
        startMusicSystem()
        animation_time = timer.curtime()
        hook.remove("drawhud","copy_material")
    end)
end

local camera_setups = {}
camera_setups["win"] = {}
local t = camera_setups["win"]
t.pos = player_ent.pos+Vector(-80,0,65)
t.ang = chip():getAngles()+Angle(8,0,0)

camera_setups["idle"] = {}
local t = camera_setups["idle"]
t[1] = {}
t[1].pos = chip():getPos()+Vector(350,250,150)
t[1].ang = chip():getAngles()+Angle(15,180+35,0)

t[2] = {}
t[2].pos = chip():getPos()+Vector(350,-250,150)
t[2].ang = chip():getAngles()+Angle(15,180-35,0)

t[3] = {}
t[3].pos = chip():getPos()+Vector(-350,250,150)
t[3].ang = chip():getAngles()+Angle(15,-35,0)

t[4] = {}
t[4].pos = chip():getPos()+Vector(-350,-250,150)
t[4].ang = chip():getAngles()+Angle(15,35,0)

local finish_ct = 0
local dead_count = 0
function start_round()
    player_ent.health = 1000
    local camera_setup_id = math.random(1,#camera_setups["idle"])
    camera_pos = camera_setups["idle"][camera_setup_id].pos
    camera_angle = camera_setups["idle"][camera_setup_id].ang
    
    player_ent:setAnimation("run_melee", 0, 0)
    dead_count = 0
    action_state = "waiting"
    selection = 1
    requested_frame = true
    capture_frame()
end

function end_round(escape)
    action_state = "waiting"
    frame_captured = false
    requested_frame = false
    stopMusicSystem(escape)
    finish_ct = timer.curtime()
    net.start("exit_seat")
    net.send()
    if escape then
        activate_camera = false
        player_ent:setNoDraw(true)
        crowbar:setNoDraw(true)
        for i = 1, #monster_table do
            if monster_table[i] then
                monster_table[i]:setNoDraw(true)
            end
        end
    else
        timer.simple(5,function()
            activate_camera = false
            player_ent:setNoDraw(true)
            crowbar:setNoDraw(true)
        end)
        dead_count = 0
        for i = 1, #monster_table do
            if monster_table[i] then
                monster_table[i]:setNoDraw(true)
            end
        end
        timer.simple(1,function()
            player_ent:setAnimation("taunt_muscle", 0, 1)
        end)
    end
end

hook.add("HUDShouldDraw", "", function(str)
    if render.isHUDActive() and frame_captured == true then
        if str == "CHudCrosshair" then
            return false
        end
        if str == "CHudZoom" then
            return false
        end
        if str == "CHudHealth" then
            return false
        end
        if str == "CHudBattery" then
            return false
        end
    end
end)
hook.add("Removed", "", function()
    if player() == owner() then
        concmd("pp_motionblur 0")
    end
end)

function scale_3d(pos)
    local POSTOSCREEN = (pos+Vector(0,0,100):getRotated(camera_angle)):toScreen()
    local POSTOSCREEN2 = pos:toScreen()
    return Vector(POSTOSCREEN["x"],POSTOSCREEN["y"],0):getDistance(Vector(POSTOSCREEN2["x"],POSTOSCREEN2["y"],0))/100
end

function linearSin(t)
    t = t % 2
    return t < 1 and t or 2 - t
end

action_state = "select action"
local flip_target_arrow = false
local flip_target_arrow2 = false
local animation_length = 1
local attack_ct = 0
local monster_move_ct = 0
local turn = 1

local hitMarkers = {}

local font = render.createFont("TargetID", 35, 400, false, false, true, false, 0, false, false)

hook.add("DrawHUD","",function()
    
    render.setFont(font)
    
    if #hitMarkers > 0 then
        for i, t in pairs(hitMarkers) do
            local time = timer.curtime() - t[1]
            render.setColor(Color(255,255,255,255*(1-time)))
            local pos = (t[2] + Vector(0,0,10*math.sin(math.rad(time*180)))):toScreen()
            render.drawText(pos["x"],pos["y"],t[3],TEXT_ALIGN.CENTER)
            if time > 1 then
                table.remove(hitMarkers,i)
            end
        end
    end
    if action_state != "waiting" and #monster_table > 0 then
        if turn == 1 then
            if input.isKeyDown(KEY.UPARROW) then
                if uparrow != true then
                    uparrow = true
                    if action_state == "select target" or action_state == "select target special" then
                        selection = selection + (flip_target_arrow2 and -1 or 1)
                        selection = math.clamp(selection > #monster_table and 1 or selection < 1 and #monster_table or selection,1,#monster_table)
                        if monster_table[selection].dead == true then
                            selection = selection + (flip_target_arrow2 and -1 or 1)
                            selection = math.clamp(selection > #monster_table and 1 or selection < 1 and #monster_table or selection,1,#monster_table)
                            if monster_table[selection].dead == true then
                                selection = selection + (flip_target_arrow2 and -1 or 1)
                                selection = math.clamp(selection > #monster_table and 1 or selection < 1 and #monster_table or selection,1,#monster_table)
                                if monster_table[selection].dead == true then
                                    selection = selection + (flip_target_arrow2 and -1 or 1)
                                    selection = math.clamp(selection > #monster_table and 1 or selection < 1 and #monster_table or selection,1,#monster_table)
                                end
                            end
                        end
                    else
                        selection = selection - 1
                    end
                    owner():emitSound("garrysmod/ui_hover.wav",100,100,CHANNEL_WEAPON)
                end
            else
                if uparrow != false then
                    uparrow = false
                end
            end
            if input.isKeyDown(KEY.DOWNARROW) then
                if downarrow != true then
                    downarrow = true
                    if action_state == "select target" or action_state == "select target special" then
                        selection = selection - (flip_target_arrow2 and -1 or 1)
                        selection = math.clamp(selection > #monster_table and 1 or selection < 1 and #monster_table or selection,1,#monster_table)
                        if monster_table[selection].dead == true then
                            selection = selection - (flip_target_arrow2 and -1 or 1)
                            selection = math.clamp(selection > #monster_table and 1 or selection < 1 and #monster_table or selection,1,#monster_table)
                            if monster_table[selection].dead == true then
                                selection = selection - (flip_target_arrow2 and -1 or 1)
                                selection = math.clamp(selection > #monster_table and 1 or selection < 1 and #monster_table or selection,1,#monster_table)
                                if monster_table[selection].dead == true then
                                    selection = selection - (flip_target_arrow2 and -1 or 1)
                                    selection = math.clamp(selection > #monster_table and 1 or selection < 1 and #monster_table or selection,1,#monster_table)
                                end
                            end
                        end
                    else
                        selection = selection + 1
                    end
                    owner():emitSound("garrysmod/ui_hover.wav",100,100,CHANNEL_WEAPON)
                end
            else
                if downarrow != false then
                    downarrow = false
                end
            end
            
            if input.isKeyDown(KEY.ENTER) then
                if enter != true then
                    enter = true
                    if action_state == "select action" then
                        owner():emitSound("garrysmod/ui_click.wav",100,100,CHANNEL_WEAPON)
                        if selection == 1 then
                            action_state = "select target"
                            selection = 1
                            if monster_table[selection].dead == true then
                                selection = selection + 1
                                selection = math.clamp(selection > #monster_table and 1 or selection < 1 and #monster_table or selection,1,#monster_table)
                                if monster_table[selection].dead == true then
                                    selection = selection + 1
                                    selection = math.clamp(selection > #monster_table and 1 or selection < 1 and #monster_table or selection,1,#monster_table)
                                    if monster_table[selection].dead == true then
                                        selection = selection + 1
                                        selection = math.clamp(selection > #monster_table and 1 or selection < 1 and #monster_table or selection,1,#monster_table)
                                    end
                                end
                            end
                            select_ct = timer.curtime()
                        elseif selection == 2 then
                            action_state = "select special"
                            selection = 1
                            select_ct = timer.curtime()
                        elseif selection == 3 then
                            end_round(true)
                        end
                    elseif action_state == "select special" then
                        if player_ent.special_bar == 100 then
                            owner():emitSound("garrysmod/ui_click.wav",100,100,CHANNEL_WEAPON)
                            action_state = "select target special"
                            selection = 1
                            if monster_table[selection].dead == true then
                                selection = selection + 1
                                selection = math.clamp(selection > #monster_table and 1 or selection < 1 and #monster_table or selection,1,#monster_table)
                                if monster_table[selection].dead == true then
                                    selection = selection + 1
                                    selection = math.clamp(selection > #monster_table and 1 or selection < 1 and #monster_table or selection,1,#monster_table)
                                    if monster_table[selection].dead == true then
                                        selection = selection + 1
                                        selection = math.clamp(selection > #monster_table and 1 or selection < 1 and #monster_table or selection,1,#monster_table)
                                    end
                                end
                            end
                            select_ct = timer.curtime()
                        end
                    elseif action_state == "select target special" then
                        owner():emitSound("garrysmod/ui_click.wav",100,100,CHANNEL_WEAPON)
                        action_state = "attacking special"
                        select_ct = timer.curtime()
                        animation_length = 3
                        player_ent:setAngles(Angle(0,target:getAngles().yaw+180,0))
                        gravity_gun:setNoDraw(false)
                        crowbar:setNoDraw(true)
                        player_ent.special_bar = 0
                        timer.simple(animation_length,function()
                            selection = 1
                            action_state = "select action"
                            select_ct = timer.curtime()
                            player_ent.attack = false
                            player_ent:setPose("move_x", 0)
                            player_ent:setAngles(Angle(0,chip():getAngles().yaw+180,0))
                            gravity_gun:setNoDraw(true)
                            crowbar:setNoDraw(false)
                            player_ent:setAnimation("run_melee", timer.curtime()*2, nil)
                            turn = turn + 1
                            turn = math.clamp(turn > #monster_table+1 and 1 or turn < 1 and #monster_table+1 or turn,1,#monster_table+1)
                            monster_move_ct = timer.curtime()
                        end)
                    elseif action_state == "select target" then
                        owner():emitSound("garrysmod/ui_click.wav",100,100,CHANNEL_WEAPON)
                        action_state = "attacking"
                        select_ct = timer.curtime()
                        animation_length = 3
                        player_ent:setAngles(Angle(0,target:getAngles().yaw+180,0))
                        timer.simple(animation_length,function()
                            selection = 1
                            action_state = "select action"
                            select_ct = timer.curtime()
                            player_ent.attack = false
                            player_ent:setPose("move_x", 0)
                            player_ent:setAngles(Angle(0,chip():getAngles().yaw+180,0))
                            turn = turn + 1
                            turn = math.clamp(turn > #monster_table+1 and 1 or turn < 1 and #monster_table+1 or turn,1,#monster_table+1)
                            monster_move_ct = timer.curtime()
                        end)
                    end
                end
            else
                if enter != false then
                    enter = false
                end
            end
            if input.isKeyDown(KEY.BACKSPACE) then
                if backspace != true then
                    backspace = true
                    if action_state == "select target" then
                        owner():emitSound("garrysmod/ui_click.wav",100,100,CHANNEL_WEAPON)
                        selection = 1
                        action_state = "select action"
                        select_ct = timer.curtime()
                    elseif action_state == "select special" then
                        owner():emitSound("garrysmod/ui_click.wav",100,100,CHANNEL_WEAPON)
                        selection = 1
                        action_state = "select action"
                        select_ct = timer.curtime()
                    elseif action_state == "select target special" then
                        owner():emitSound("garrysmod/ui_click.wav",100,100,CHANNEL_WEAPON)
                        selection = 1
                        action_state = "select special"
                        select_ct = timer.curtime()
                    end
                end
            else
                if backspace != false then
                    backspace = false
                end
            end
            if (action_state == "attacking" or action_state == "attacking special") and target and target != nil and target:isValid() then
                local lerp_to_target_time = linearSin((timer.curtime()-select_ct)/animation_length*2)
                local lerp_to_target = math.lerpVector(math.clamp(lerp_to_target_time*1.5,0,1), player_ent.pos, target.pos + target:getForward()*50)
                if math.clamp(lerp_to_target_time*1.5,0,1) == 1 and player_ent.attack != true then
                    player_ent.attack = true
                    player_ent:setPose("move_x", 0)
                    attack_ct = timer.curtime()
                    local hit = math.round(math.random(1,10)) > 1
                    if hit then
                        owner():emitSound(action_state == "attacking" and "physics/body/body_medium_impact_hard1.wav" or "ambient/levels/citadel/weapon_disintegrate3.wav",100,100,CHANNEL_WEAPON)
                        local damage = (action_state == "attacking" and math.round(math.random(25,35)) or 150)
                        target.health = target.health - damage
                        target.health = math.clamp(target.health,0,9999)
                        player_ent.special_bar = player_ent.special_bar + 4
                        table.insert(hitMarkers,1,{timer.curtime(),target:getPos()+Vector(0,0,75)+Vector(math.random(-10,10),math.random(-10,10),math.random(-10,10))/2,damage})
                        if target.health == 0 then
                            target.dead = true
                            target.dead_ct = timer.curtime()
                        end
                    else
                        owner():emitSound("weapons/iceaxe/iceaxe_swing1.wav",100,100,CHANNEL_WEAPON)
                        target.dodge = true
                        table.insert(hitMarkers,1,{timer.curtime(),target:getPos()+Vector(0,0,75)+Vector(math.random(-10,10),math.random(-10,10),math.random(-10,10))/2,"MISS"})
                        player_ent.special_bar = player_ent.special_bar + 2
                    end
                end
                if target.dodge then
                    local lerp_to_target_time = linearSin((timer.curtime()-attack_ct)/animation_length*4)
                    local lerp_to_target = math.lerpVector(math.clamp(lerp_to_target_time*1.5,0,1), target.pos, target.pos - target:getForward()*50)
                    target:setPos(lerp_to_target)
                    
                    target:setPose("move_x", (((timer.curtime()-attack_ct)/animation_length*2 > 0.5) and 0.5 or -0.5)*(math.clamp(lerp_to_target_time*1.5,0,1) != 1 and 1 or 0))
                    target:setAnimation("zombie_run", timer.curtime()*2, nil)
                    if (timer.curtime()-attack_ct)/animation_length*2 >= 1 then
                        target.dodge = false
                        target:setPose("move_x", 0)
                    end
                end
                if math.clamp(lerp_to_target_time*1.5,0,1) == 1 then
                    player_ent:setAnimation(action_state == "attacking" and "seq_baton_swing" or "run_physgun", math.clamp((timer.curtime() - attack_ct)*1.5,0,1), nil)
                else
                    player_ent:setPose("move_x", player_ent.attack and -1 or 1)
                    player_ent:setAnimation(action_state == "attacking" and "run_melee" or "run_physgun", timer.curtime()*2, nil)
                end
                player_ent:setPos(lerp_to_target)
            end
        end
        if turn > 1 then
            local monster = monster_table[turn-1]
            if monster.dead then
                turn = turn + 1
                if turn > (#monster_table + 1) then
                    turn = 1
                end
            else
                local animation_length = 3
                local lerp_to_target_time = linearSin(math.clamp((timer.curtime()-monster_move_ct)/animation_length*2,0,2))
                local lerp_to_target = math.lerpVector(math.clamp(lerp_to_target_time*1.5,0,1), monster.pos, player_ent.pos + player_ent:getForward()*50)
                if math.clamp(lerp_to_target_time*1.5,0,1) == 1 and monster.attack != true then
                    monster.attack = true
                    monster:setPose("move_x", 0)
                    attack_ct_monster = timer.curtime()
                    local hit = math.round(math.random(1,10)) == 1
                    if hit then
                        owner():emitSound("npc/fast_zombie/claw_strike"..math.random(1,3)..".wav",100,100,CHANNEL_WEAPON)
                        local damage = math.round(math.random(5,15))
                        player_ent.health = player_ent.health - damage
                        player_ent.health = math.clamp(player_ent.health,0,9999)
                        player_ent.special_bar = player_ent.special_bar + 8
                        table.insert(hitMarkers,1,{timer.curtime(),player_ent:getPos()+Vector(0,0,75)+Vector(math.random(-10,10),math.random(-10,10),math.random(-10,10))/2,damage})
                        if player_ent.health == 0 then
                            player_ent.dead = true
                            player_ent.dead_ct = timer.curtime()
                        end
                    else
                        owner():emitSound("npc/fast_zombie/claw_miss1.wav",100,100,CHANNEL_WEAPON)
                        player_ent.dodge = true
                        table.insert(hitMarkers,1,{timer.curtime(),player_ent:getPos()+Vector(0,0,75)+Vector(math.random(-10,10),math.random(-10,10),math.random(-10,10))/2,"MISS"})
                    end
                end
                if player_ent.dodge then
                    local lerp_to_target_time = linearSin((timer.curtime()-attack_ct_monster)/animation_length*4)
                    local lerp_to_target = math.lerpVector(math.clamp(lerp_to_target_time*1.5,0,1), player_ent.pos, player_ent.pos - player_ent:getForward()*50)
                    player_ent:setPos(lerp_to_target)
                    
                    player_ent:setPose("move_x", (((timer.curtime()-attack_ct_monster)/animation_length*2 > 0.5) and 0.5 or -0.5)*(math.clamp(lerp_to_target_time*1.5,0,1) != 1 and 1 or 0))
                    player_ent:setAnimation("run_melee", timer.curtime()*2, nil)
                    if (timer.curtime()-attack_ct_monster)/animation_length*2 >= 1 then
                        player_ent.dodge = false
                        player_ent:setPose("move_x", 0)
                    end
                end
                if math.clamp(lerp_to_target_time*1.5,0,1) == 1 then
                    monster:setAnimation("seq_baton_swing", math.clamp((timer.curtime() - attack_ct_monster)*1.5,0,1), nil)
                else
                    monster:setPose("move_x", monster.attack and -1 or 1)
                    monster:setAnimation("zombie_run", timer.curtime()*2, nil)
                end
                if lerp_to_target_time == 0 and monster.attack == true then
                    monster:setPose("move_x", 0)
                    monster.attack = false
                    turn = turn + 1
                    if turn > (#monster_table + 1) then
                        turn = 1
                    end
                    monster_move_ct = timer.curtime()
                end
                monster:setPos(lerp_to_target)
            end
        end
        local player_pos = player_ent:getPos()+Vector(0,0,85)
        local player_selection_arrow_pos = player_pos:toScreen()
        if turn == 1 then
            if action_state != "attacking special" and action_state != "attacking" then
                render.setColor(Color(255,255,255,255))
                
                render.setMaterial(selection==1 and selection_bar_highlight or selection_bar)
                render.drawTexturedRect(1206, 833+52*2, 1024/403*630, 1024)
            end
            if action_state == "select action" then
                selection = math.clamp(selection > 3 and 1 or selection < 1 and 3 or selection,1,3)
                
                local appear_time_rate = (timer.curtime()-select_ct)*20
                local appear_slide_distance = 200
                
                local appear_time_offset = 3
                local appear_time = math.clamp(-appear_time_offset+appear_time_rate,0,1)
                render.setColor(Color(255,255,255,255*appear_time))
                
                render.setMaterial(action_bar)
                render.drawTexturedRectUV(-appear_slide_distance*(1-appear_time), 0, Width, Height, 0, 0, 1, 1*(576/1024))
                
                local appear_time_offset = 0
                local appear_time = math.clamp(-appear_time_offset+appear_time_rate,0,1)
                render.setColor(Color(255,255,255,255*appear_time))
                
                render.setMaterial(selection==1 and selection_bar_highlight or selection_bar)
                render.drawTexturedRect(167-appear_slide_distance*(1-appear_time), 805, 1024, 1024)
                render.drawText(167+403/2,805+8,"Attack",TEXT_ALIGN.CENTER)
                
                local appear_time_offset = 1
                local appear_time = math.clamp(-appear_time_offset+appear_time_rate,0,1)
                render.setColor(Color(255,255,255,255*appear_time))
                
                render.setMaterial(selection==2 and selection_bar_highlight or selection_bar)
                render.drawTexturedRect(167-appear_slide_distance*(1-appear_time), 805+52*1, 1024, 1024)
                render.drawText(167+403/2,805+52*1+8,"Special",TEXT_ALIGN.CENTER)
                
                local appear_time_offset = 2
                local appear_time = math.clamp(-appear_time_offset+appear_time_rate,0,1)
                render.setColor(Color(255,255,255,255*appear_time))
                
                render.setMaterial(selection==3 and selection_bar_highlight or selection_bar)
                render.drawTexturedRect(167-appear_slide_distance*(1-appear_time), 805+52*2, 1024, 1024)
                render.drawText(167+403/2,805+52*2+8,"Escape",TEXT_ALIGN.CENTER)
                
                render.setMaterial(action_selection_arrow)
                render.drawTexturedRect(111+15*math.sin(math.rad(timer.curtime()*360)), 794 + 52*(selection-1), 1024, 1024)
            elseif action_state == "select special" then
                selection = 1
                
                local appear_time_rate = (timer.curtime()-select_ct)*20
                local appear_slide_distance = 200
                
                local appear_time_offset = 0
                local appear_time = math.clamp(-appear_time_offset+appear_time_rate,0,1)
                render.setColor(Color(player_ent.special_bar == 100 and 255 or 125,player_ent.special_bar == 100 and 255 or 125,player_ent.special_bar == 100 and 255 or 125,255*appear_time))
                
                render.setMaterial(selection==1 and selection_bar_highlight or selection_bar)
                render.drawTexturedRect(167-appear_slide_distance*(1-appear_time), 805+52*2, 1024, 1024)
                render.drawText(167+403/2,805+52*2+8,"Gravity Gun",TEXT_ALIGN.CENTER)
                
                render.setColor(Color(255,255,255,255))
                render.setMaterial(action_selection_arrow)
                render.drawTexturedRect(111+15*math.sin(math.rad(timer.curtime()*360)), 794 + 52*(selection+1), 1024, 1024)
            elseif action_state == "select target" or action_state == "select target special" then
                selection = math.clamp(selection > #monster_table and 1 or selection < 1 and #monster_table or selection,1,#monster_table)
                target = monster_table[selection]
                
                local target_pos = target:getPos()+Vector(0,0,55)
                local target_selection_arrow_pos = target_pos:toScreen()
                local targets_center_pos = (chip():getPos()+Vector(distance/2,0,0)):toScreen()
                
                flip_target_arrow = player_selection_arrow_pos["x"] < target_selection_arrow_pos["x"]
                flip_target_arrow2 = player_selection_arrow_pos["x"] < targets_center_pos["x"]
                if action_state == "select target" or action_state == "select target special" then
                    render.setMaterial(target_selection_arrow)
                    if flip_target_arrow then
                        render.drawTexturedRectUV(target_selection_arrow_pos["x"]+(80-1024/2)*scale_3d(target_pos)/2, target_selection_arrow_pos["y"]-77/4.5*scale_3d(target_pos), 512*scale_3d(target_pos)/2, 512*scale_3d(target_pos)/2, 1, 0, 0, 1)
                    else
                        render.drawTexturedRectUV(target_selection_arrow_pos["x"]-80*scale_3d(target_pos)/2, target_selection_arrow_pos["y"]-77/4.5*scale_3d(target_pos), 512*scale_3d(target_pos)/2, 512*scale_3d(target_pos)/2, 0, 0, 1, 1)
                    end
                end
            end
        end
        
        render.setColor(Color(0,200,135,200))
        render.drawText(1206+630/2,833+52*2-3,"HP",TEXT_ALIGN.LEFT)
        
        render.setColor(Color(200,100,200,255))
        render.drawText(1206+630/2+630*0.235,833+52*2-3,"MP",TEXT_ALIGN.LEFT)
        
        render.setColor(Color(0,0,0,255))
        render.drawRect(1206+630/2-630*0.4,833+52*2+35,630*0.8,8)
        
        player_ent.special_bar = math.clamp(player_ent.special_bar,0,100)
        render.setColor(Color(255,255-105*(player_ent.special_bar/100),0,255))
        render.drawRect(1206+630/2-630*0.4+2,833+52*2+37,(630*0.8-4)*(player_ent.special_bar/100),4)
        
        render.setColor(Color(255,255,255,255))
        
        render.drawText(1206+630/2-630*0.4,833+52*2-3,owner():getName(),TEXT_ALIGN.LEFT)
        
        render.drawText(1206+630/2+630*0.4,833+52*2-3,0,TEXT_ALIGN.RIGHT)
        
        render.drawText(1206+630/2+630*0.2,833+52*2-3,player_ent.health,TEXT_ALIGN.RIGHT)
        
        local rotate_sin = math.abs(math.sin(math.rad(timer.curtime()*180)))
        render.setMaterial(player_selection_arrow)
        render.drawTexturedRect(player_selection_arrow_pos["x"]-(37*0.25*rotate_sin)/2*scale_3d(player_pos),player_selection_arrow_pos["y"]-(37*0.25)/2*scale_3d(player_pos),1024*0.25*rotate_sin*scale_3d(player_pos),1024*0.25*scale_3d(player_pos))
    end
        
        
    if ready and not frame_captured and not activate_camera then
        local time = math.clamp(-7+(timer.curtime() - finish_ct),0,1)
        if time < 1 then
            render.setColor(Color(0,0,0,255*(1-time)))
            render.drawRect(0,0,Width,Height)
        end
    end
end)

local pressed = false
hook.add("CalcView", "", function(pos, ang, fov, znear, zfar)
    for mon_id = 1, #monster_table do
        local monster = monster_table[mon_id]
        if monster.dead and monster.cant_die_again != true then
            local dead_time = math.clamp(-2+(timer.curtime() - monster.dead_ct),0,1)
            monster:setColor(Color(255,255,255,255*(1-dead_time)))
            if dead_time >= 1 then
                monster.cant_die_again = true
                dead_count = dead_count + 1
                if dead_count == #monster_table then
                    end_round(false)
                end
            end
        end
    end
    if not render.isHUDActive() then return end
    if ready != true then
        if battle_music["start"] and battle_music["loop"] and battle_music["win"] then
            ready = true
            block_switch = false
            if player() == owner() then
                print("Ready")
            else
                printHud(player(), "Ready")
            end
        end
    end
    if player():keyDown(IN_KEY.RELOAD) then
        if pressed != true then
            pressed = true
            if block_switch != true then
                if requested_frame != true then
                    if ready then
                        start_round()
                    end
                end
            end
        end
    else
        if pressed != false then
            pressed = false
        end
    end
    if activate_camera then
        local lerp_time = math.clamp(timer.curtime() - finish_ct,0,requested_frame == false and 1 or 0)
        camera_pos_set = math.lerpVector(lerp_time,camera_pos,camera_setups["win"].pos)
        camera_angle_set = math.slerpQuaternion(camera_angle:getQuaternion(),camera_setups["win"].ang:getQuaternion(),lerp_time):getEulerAngle()

        screen_blocker:setColor(Color(0,0,0,math.clamp(2-(timer.curtime()-animation_time),0,1)*255))
        screen_blocker:setPos(camera_pos_set+camera_angle_set:getForward()*12.5)
        screen_blocker:setAngles(camera_angle_set)
        for index, holo in pairs(holos) do
            local time = math.easeInSine(math.clamp((timer.curtime()-animation_time)*1-2*index/#holos,0,1.1))
            local time2 = math.easeInOutSine(math.clamp((timer.curtime()-animation_time)*6,0,1))
            
            if time < 1 then
                if holo.done != true then
                    holo.done = true
                    holo:setNoDraw(false)
                    holo.layer:setNoDraw(false)
                end
                holo:setColor(Color(255*(1-math.easeInSine(time)),255*(1-math.easeInSine(time)),255*(1-math.easeInSine(time)),255))
                holo:setPos(camera_pos_set+camera_angle_set:getForward()*(12-0.25*time2*holo.pos[3]/20*1.5)+(camera_angle_set:getUp()*holo.pos[1]+camera_angle_set:getUp()*holo.pos[1]*math.easeInSine(time)*0.1-camera_angle_set:getRight()*holo.pos[2]+camera_angle_set:getRight()*math.easeInSine(math.easeInSine(time))*5)*10)
                local _, localAng = localToWorld(Vector(),Angle(0,90,180)+holo.ang*math.clamp(time2*0.1+0.9*time,0,1),Vector(),camera_angle_set)
                holo:setAngles(localAng)
            else
                if holo.done != false then
                    holo.done = false
                    holo:setNoDraw(true)
                    holo.layer:setNoDraw(true)
                end
            end
        end
        return {
            angles = camera_angle_set,
            origin = camera_pos_set,
        }
    end
end)
end
