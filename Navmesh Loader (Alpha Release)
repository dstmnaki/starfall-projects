--@name Nakilibs/Navmesh/Navmesh_Loader
--@author Nakkitsunami
--@shared

if SERVER then
    local areasData = {}
    local pendingMapData = {}
    local lookupTableIDS = {}
    
    local hasNavmesh = navmesh.getAllNavAreas()
    
    if hasNavmesh and #hasNavmesh > 0 then
        print("This map has navmesh already!")
    end 
    
    local function createArea(from, to, token, originalID)
        local a = navmesh.createNavArea(from + Vector(0,0,25), to + Vector(0,0,25))
        if a then
            a:placeOnGround(NAV_CORNER.NUM_CORNERS)
            local id = a:getID()
            local lf = a:getCorner(NAV_CORNER.NORTH_WEST)
            local rf = a:getCorner(NAV_CORNER.NORTH_EAST)
            local lb = a:getCorner(NAV_CORNER.SOUTH_WEST)
            local rb = a:getCorner(NAV_CORNER.SOUTH_EAST)
            areasData[id] = { lf = lf, rf = rf, lb = lb, rb = rb, connections = areasData[id] and areasData[id].connections or {} }
            if originalID then
                lookupTableIDS[tostring(originalID)] = id
            end
            
            return a
        else
            return nil
        end
    end
    
    local function connectAreas(id1, id2, oneway)
        if not isnumber(id1) or not isnumber(id2) then return false, "Given IDs are invalid!" end
        if not areasData[id1] or not areasData[id2] then return false, "Selected areas are invalid!" end
        local first = navmesh.getNavAreaByID(id1)
        local second = navmesh.getNavAreaByID(id2)
        
        areasData[id1].connections = areasData[id1].connections or {}
        areasData[id2].connections = areasData[id2].connections or {}
        if table.hasValue(areasData[id1].connections, id2) then
            return false, "Areas are already connected!"
        else
            areasData[id1].connections[#areasData[id1].connections+1] = id2
        end
        if not oneway then
            if table.hasValue(areasData[id2].connections, id1) then
                return false, "Areas are already connected!"
            else
                areasData[id2].connections[#areasData[id2].connections+1] = id1
            end
            if first:isValid() and second:isValid() then
                first:connectTo(second)
                second:connectTo(first)
            end
        else
            if first and second then
                first:connectTo(second)
            end
        end
        return true
    end
    
    function buildConnections(data)
        local conn_ct = 0
        local step = 1
        local ids = table.getKeys(data)

        hook.add("Think","build_connections",function()
            if timer.curtime() - conn_ct > 0.05 then
                local id = ids[step]
                if not id then
                    hook.remove("Think","build_connections")
                    net.start("mapBuildComplete")
                    net.send(owner())
                    return
                end
                local area = data[id]
                local id_this = lookupTableIDS[tostring(area.id)]
                for _,conn in ipairs(area.connections or {}) do
                    local id_that = lookupTableIDS[tostring(conn)]
                    connectAreas(id_this, id_that, true)
                end
                conn_ct = timer.curtime()
                step = step + 1
            end
        end)
    end
    
    function buildMap(data)
        local build_map_ct = 0
        local build_map_iteration = 1
        local max = table.count(data)
        hook.add("Think","build_map",function()
            if timer.curtime() - build_map_ct > 0.1 then
                local token = build_map_iteration
                local area = data[token]
                if area then
                    createArea(area.from, area.to, token, area.id)
                end
                build_map_ct = timer.curtime()
                build_map_iteration = build_map_iteration + 1
                if build_map_iteration > max then
                    hook.remove("Think","build_map")
                    buildConnections(data)
                end
            end
        end)
    end

    
    hook.add("net", "", function(name, len, ply)
        if name == "connectAreas" then
            local id1 = net.readFloat()
            local id2 = net.readFloat()
            local success, reason = connectAreas(id1, id2)
            if success then
                sendConnectCallback(id1, id2)
            else
                print("Failed to connect areas: "..reason)
            end
        elseif name == "mapChunk" then
            local id = net.readUInt(16)
            local from = net.readVector()
            local to = net.readVector()
            local connStr = net.readString()
            local connections = {}
            if connStr ~= "" then
                for _,c in ipairs(string.explode(",", connStr)) do
                    connections[#connections+1] = tonumber(c)
                end
                conntable = " : "..connStr
            else
                conntable = ""
            end   
            
            printConsole("Area "..tostring(id)..": "..tostring(from).." "..tostring(to)..conntable)
            pendingMapData[#pendingMapData+1] = {id = id, from = from, to = to, connections = connections }
        elseif name == "mapUploadComplete" then
            buildMap(pendingMapData)
        end
    end)

else -- CLIENT
    if player() ~= owner() then return end
    enableHud(owner(), true)
    
    local mapname = game.getMap()
     
    local function loadMap()
        local path = "nakilibs/navmesh/areas/"..(mapname or game.getMap())..".txt"
        local contents = file.read(path)
        if not contents or contents == "" then return print("No file was locationed with the name "..mapname..".txt in folder data/sf_filedata/nakilibs/navmesh/areas/ !") end
        print("File found! Unpacking and sending to server, please wait...")
        local lines = string.explode("\n", contents)
        local id, from, to, connections
        local step = 0
        local load_map_chunks_ct = 0
        local line_step = 1
        local sent = false
        hook.add("Think", "load_map_chunks", function()
            if timer.curtime() - load_map_chunks_ct > 0.1 then
                local line = lines[line_step]
        
                if line_step > #lines then
                    net.start("mapUploadComplete")
                    net.send()
                    hook.remove("Think", "load_map_chunks")
                    print("All data sent to server successfully!")
                    print("Loading "..(#lines/3).." areas...")
                    return
                end
        
                if line then
                    line = string.trim(line)
        
                    if string.startsWith(line, "areaid:") then
                        id = tonumber(string.sub(line, 8))
                        from, to, connections = nil, nil, nil
                        step = 1
                        line_step = line_step + 1
        
                    elseif step == 1 then
                        local nums = string.explode(" ", line)
                        if #nums >= 6 then
                            from = Vector(tonumber(nums[1]), tonumber(nums[2]), tonumber(nums[3]))
                            to   = Vector(tonumber(nums[4]), tonumber(nums[5]), tonumber(nums[6]))
                            step = 2
                            line_step = line_step + 1
                        else
                            line_step = line_step + 1
                        end
        
                    elseif step == 2 then
                        if line ~= "" then
                            connections = line
                        else
                            connections = ""
                        end
                        if connections == "nil" then connections = "" end
                        if id and from and to then
                            net.start("mapChunk")
                            net.writeUInt(id, 16)
                            net.writeVector(from)
                            net.writeVector(to)
                            net.writeString(connections or "")
                            net.send()
                        end
        
                        step = 0
                        line_step = line_step + 1
                    else
                        line_step = line_step + 1
                    end
                else
                    line_step = line_step + 1
                end
        
                load_map_chunks_ct = timer.curtime()
            end
        end)
    end
    
    hook.add("net","navmesh_client_net",function(name,len,ply)
        if name == "mapBuildComplete" then
            print("Navmesh build complete!")
        end
    end)
    
    loadMap()
end
